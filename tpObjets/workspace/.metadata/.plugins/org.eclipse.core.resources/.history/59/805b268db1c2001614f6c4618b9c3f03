import ClosedHashDict.EntryHashDict;
import Map.Entry;


public class OpenedClosedHashDict<K, V> extends ClosedHashDict<K, V>{

	public OpenedClosedHashDict(int capacity) {
		super(capacity);
	}

	private void augmenterTaille(){
		
	}
	@Override
	public V put(K key, V value) {
		if(this.size == this.table.length)
			return null;
		
		Entry<K, V> newEntry = new EntryHashDict<K, V>(key, value);
		
		int pos = Math.abs(key.hashCode()) % table.length;
		
		boolean boucle = false;
		for(int i = pos; i < table.length; i++) {
			//Si on revient à la position de départ on stop
			if(i == pos && boucle)
				return null;
			if(table[i] == null) {
				table[i] = newEntry;
				this.size++;
				if(this.size == this.table.length){
					this.augmenterTaille();
				}
				return table[i].getValue();
			}
			// Si on arrive à la fin on revient au début
			if(i == table.length - 1){
				i = 0;
				boucle = true;
			}
		}
		return null;
	}
}
