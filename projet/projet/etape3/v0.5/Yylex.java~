/* The following code was generated by JFlex 1.4.1 on 06/12/16 16:32 */

import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 06/12/16 16:32 from the specification file
 * <tt>./projet.lex</tt>
 */
class Yylex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\50\25\0\1\67\1\0\1\61\5\0\1\51\1\52\2\0"+
    "\1\63\1\0\1\62\1\47\12\65\1\64\1\56\1\57\1\55\1\60"+
    "\2\0\1\33\1\66\1\41\1\36\1\35\1\46\1\32\1\66\1\44"+
    "\2\66\1\42\1\34\1\45\1\31\1\27\1\66\1\30\1\40\1\43"+
    "\1\37\5\66\4\0\1\20\1\0\1\4\1\25\1\2\1\22\1\1"+
    "\1\15\1\7\1\13\1\5\1\23\1\66\1\3\1\16\1\17\1\11"+
    "\1\21\1\66\1\6\1\24\1\12\1\14\1\10\1\66\1\26\2\66"+
    "\1\53\1\0\1\54\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\14\2\1\3\6\2\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\1"+
    "\1\16\1\17\1\20\1\21\20\2\1\22\12\2\1\23"+
    "\3\2\1\0\1\24\1\0\1\25\1\26\1\27\1\2"+
    "\1\30\27\2\1\31\14\2\1\0\2\2\1\32\22\2"+
    "\1\33\3\2\1\34\6\2\1\35\12\2\1\0\2\2"+
    "\1\36\4\2\1\37\7\2\1\40\1\2\1\41\7\2"+
    "\1\42\4\2\1\43\4\2\2\0\1\44\1\45\1\0"+
    "\2\2\1\0\1\2\1\46\1\47\4\2\1\50\2\2"+
    "\1\51\4\2\1\0\10\2\2\0\1\52\1\0\2\2"+
    "\1\0\1\2\1\0\2\2\1\53\1\2\1\0\1\54"+
    "\1\55\1\2\1\56\1\2\1\57\1\0\4\2\1\60"+
    "\3\2\4\0\1\61\1\2\1\0\1\2\1\0\2\2"+
    "\1\62\1\0\1\2\1\63\1\0\2\2\1\64\1\65"+
    "\1\0\1\66\1\67\5\0\1\2\1\0\1\2\1\0"+
    "\1\2\1\70\1\0\1\2\1\0\2\2\1\0\1\71"+
    "\4\0\1\2\1\72\1\73\1\0\1\2\1\0\1\74"+
    "\2\0\1\2\2\0\1\75\2\0\1\2\1\0\1\2"+
    "\1\0\1\76\1\0\1\2\4\0\1\77\1\0\1\100"+
    "\17\0\1\101\1\0\1\102\1\103\1\104\6\0\1\105"+
    "\1\106\11\0\1\107\15\0\1\110\2\0\1\111\1\112"+
    "\1\0\1\113";

  private static int [] zzUnpackAction() {
    int [] result = new int[384];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\340\0\u0118\0\u0150\0\u0188"+
    "\0\u01c0\0\u01f8\0\u0230\0\u0268\0\u02a0\0\u02d8\0\70\0\u0310"+
    "\0\u0348\0\u0380\0\u03b8\0\u03f0\0\u0428\0\u0460\0\70\0\70"+
    "\0\70\0\70\0\70\0\u0498\0\70\0\70\0\70\0\u04d0"+
    "\0\70\0\70\0\70\0\u0508\0\u0540\0\u0578\0\u05b0\0\u05e8"+
    "\0\u0620\0\u0658\0\u0690\0\u06c8\0\u0700\0\u0738\0\u0770\0\u07a8"+
    "\0\u07e0\0\u0818\0\u0850\0\u0888\0\u0188\0\u08c0\0\u08f8\0\u0930"+
    "\0\u0968\0\u09a0\0\u09d8\0\u0a10\0\u0a48\0\u0a80\0\u0ab8\0\u0af0"+
    "\0\u0b28\0\u0b60\0\u0b98\0\u0bd0\0\70\0\u04d0\0\70\0\u0c08"+
    "\0\u0c40\0\u0c78\0\u0188\0\u0cb0\0\u0ce8\0\u0d20\0\u0d58\0\u0d90"+
    "\0\u0dc8\0\u0e00\0\u0e38\0\u0e70\0\u0ea8\0\u0ee0\0\u0f18\0\u0f50"+
    "\0\u0f88\0\u0fc0\0\u0ff8\0\u1030\0\u1068\0\u10a0\0\u10d8\0\u1110"+
    "\0\u1148\0\u1180\0\u0188\0\u11b8\0\u11f0\0\u1228\0\u1260\0\u1298"+
    "\0\u12d0\0\u1308\0\u1340\0\u1378\0\u13b0\0\u13e8\0\u1420\0\u0c08"+
    "\0\u1458\0\u1490\0\u0188\0\u14c8\0\u1500\0\u1538\0\u1570\0\u15a8"+
    "\0\u15e0\0\u1618\0\u1650\0\u1688\0\u16c0\0\u16f8\0\u1730\0\u1768"+
    "\0\u17a0\0\u17d8\0\u1810\0\u1848\0\u1880\0\u0188\0\u18b8\0\u18f0"+
    "\0\u1928\0\u0188\0\u1960\0\u1998\0\u19d0\0\u1a08\0\u1a40\0\u1a78"+
    "\0\u0188\0\u1ab0\0\u1ae8\0\u1b20\0\u1b58\0\u1b90\0\u1bc8\0\u1c00"+
    "\0\u1c38\0\u1c70\0\u1ca8\0\u1ce0\0\u1d18\0\u1d50\0\u0188\0\u1d88"+
    "\0\u1dc0\0\u1df8\0\u1e30\0\u0188\0\u1e68\0\u1ea0\0\u1ed8\0\u1f10"+
    "\0\u1f48\0\u1f80\0\u1fb8\0\u1ff0\0\u2028\0\u0188\0\u2060\0\u2098"+
    "\0\u20d0\0\u2108\0\u2140\0\u2178\0\u21b0\0\u0188\0\u21e8\0\u2220"+
    "\0\u2258\0\u2290\0\u0188\0\u22c8\0\u2300\0\u2338\0\u2370\0\u23a8"+
    "\0\u23e0\0\u2418\0\u0188\0\u2450\0\u2488\0\u24c0\0\u24f8\0\u2530"+
    "\0\u0188\0\u2568\0\u25a0\0\u25d8\0\u2610\0\u2648\0\u2680\0\u26b8"+
    "\0\u26f0\0\u0188\0\u2728\0\u2760\0\u2798\0\u27d0\0\u2808\0\u2840"+
    "\0\u2878\0\u28b0\0\u28e8\0\u2920\0\u2958\0\u2990\0\u29c8\0\u2a00"+
    "\0\u2a38\0\u2a70\0\u2aa8\0\u2ae0\0\u2b18\0\u2b50\0\u2b88\0\u2bc0"+
    "\0\u2bf8\0\u2c30\0\u0188\0\u2c68\0\u2ca0\0\u0188\0\u0188\0\u2cd8"+
    "\0\u0188\0\u2d10\0\u0188\0\u2d48\0\u2d80\0\u2db8\0\u2df0\0\u2e28"+
    "\0\u0188\0\u2e60\0\u2e98\0\u2ed0\0\u2f08\0\u2f40\0\u2f78\0\u2fb0"+
    "\0\u0188\0\u2fe8\0\u3020\0\u3058\0\u3090\0\u30c8\0\u3100\0\u0188"+
    "\0\u3138\0\u3170\0\u0188\0\u31a8\0\u31e0\0\u3218\0\u0188\0\u0188"+
    "\0\u3250\0\u0188\0\u0188\0\u3288\0\u32c0\0\u32f8\0\u3330\0\u3368"+
    "\0\u33a0\0\u33d8\0\u3410\0\u3448\0\u3480\0\u0188\0\u34b8\0\u34f0"+
    "\0\u3528\0\u3560\0\u3598\0\u35d0\0\70\0\u3608\0\u3640\0\u3678"+
    "\0\u36b0\0\u36e8\0\70\0\u0188\0\u3720\0\u3758\0\u3790\0\u0188"+
    "\0\u37c8\0\u3800\0\u3838\0\u3870\0\u38a8\0\70\0\u38e0\0\u3918"+
    "\0\u3950\0\u3988\0\u39c0\0\u39f8\0\70\0\u3a30\0\u3a68\0\u3aa0"+
    "\0\u3ad8\0\u3b10\0\u3b48\0\u0188\0\u3b80\0\u0188\0\u3bb8\0\u3bf0"+
    "\0\u3c28\0\u3c60\0\u3c98\0\u3cd0\0\u3d08\0\u3d40\0\u3d78\0\u3db0"+
    "\0\u3de8\0\u3e20\0\u3e58\0\u3e90\0\u3ec8\0\70\0\u3f00\0\70"+
    "\0\70\0\70\0\u3f38\0\u3f70\0\u3fa8\0\u3fe0\0\u4018\0\u4050"+
    "\0\70\0\70\0\u4088\0\u40c0\0\u40f8\0\u4130\0\u4168\0\u41a0"+
    "\0\u41d8\0\u4210\0\u4248\0\70\0\u4280\0\u42b8\0\u42f0\0\u4328"+
    "\0\u4360\0\u4398\0\u43d0\0\u4408\0\u4440\0\u4478\0\u44b0\0\u44e8"+
    "\0\u4520\0\70\0\u4558\0\u4590\0\70\0\70\0\u45c8\0\70";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[384];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\2\10\1\11"+
    "\1\12\1\13\1\14\1\10\1\15\1\16\1\10\1\17"+
    "\1\20\1\21\1\10\1\22\2\10\1\23\6\10\1\24"+
    "\1\10\1\25\6\10\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\10\1\27\71\0\1\10\1\45\7\10"+
    "\1\46\5\10\1\0\5\10\1\47\20\10\16\0\2\10"+
    "\2\0\3\10\1\50\6\10\1\51\4\10\1\0\26\10"+
    "\16\0\2\10\2\0\3\10\1\52\13\10\1\0\26\10"+
    "\16\0\2\10\2\0\2\10\1\53\10\10\1\54\3\10"+
    "\1\0\3\10\1\55\22\10\16\0\2\10\2\0\16\10"+
    "\1\56\1\0\26\10\16\0\2\10\2\0\17\10\1\0"+
    "\26\10\16\0\2\10\2\0\4\10\1\57\3\10\1\60"+
    "\6\10\1\0\26\10\16\0\2\10\2\0\5\10\1\61"+
    "\5\10\1\62\3\10\1\0\26\10\16\0\2\10\2\0"+
    "\1\63\2\10\1\64\3\10\1\65\7\10\1\0\26\10"+
    "\16\0\2\10\2\0\4\10\1\66\12\10\1\0\26\10"+
    "\16\0\2\10\2\0\1\67\2\10\1\70\13\10\1\0"+
    "\3\10\1\71\22\10\16\0\2\10\2\0\1\72\7\10"+
    "\1\73\6\10\1\0\26\10\16\0\2\10\2\0\5\10"+
    "\1\74\2\10\1\75\6\10\1\0\26\10\16\0\2\10"+
    "\2\0\1\76\16\10\1\0\26\10\16\0\2\10\2\0"+
    "\1\77\3\10\1\100\12\10\1\0\26\10\16\0\2\10"+
    "\2\0\17\10\1\0\7\10\1\101\16\10\16\0\2\10"+
    "\2\0\17\10\1\0\14\10\1\102\11\10\16\0\2\10"+
    "\2\0\17\10\1\0\20\10\1\103\5\10\16\0\2\10"+
    "\50\0\1\104\75\0\1\105\12\0\50\106\1\107\10\106"+
    "\1\110\6\106\1\0\17\111\1\0\26\111\16\0\1\44"+
    "\1\111\2\0\2\10\1\112\5\10\1\113\6\10\1\0"+
    "\26\10\16\0\2\10\2\0\1\114\2\10\1\115\13\10"+
    "\1\0\26\10\16\0\2\10\2\0\1\116\16\10\1\0"+
    "\26\10\16\0\2\10\2\0\14\10\1\117\2\10\1\0"+
    "\26\10\16\0\2\10\2\0\3\10\1\120\13\10\1\0"+
    "\26\10\16\0\2\10\2\0\7\10\1\121\7\10\1\0"+
    "\26\10\16\0\2\10\2\0\2\10\1\122\1\123\4\10"+
    "\1\124\6\10\1\0\26\10\16\0\2\10\2\0\11\10"+
    "\1\125\5\10\1\0\26\10\16\0\2\10\2\0\17\10"+
    "\1\0\3\10\1\126\22\10\16\0\2\10\2\0\11\10"+
    "\1\127\5\10\1\0\26\10\16\0\2\10\2\0\17\10"+
    "\1\0\1\10\1\130\24\10\16\0\2\10\2\0\2\10"+
    "\1\131\14\10\1\0\26\10\16\0\2\10\2\0\17\10"+
    "\1\0\1\10\1\132\24\10\16\0\2\10\2\0\7\10"+
    "\1\133\7\10\1\0\26\10\16\0\2\10\2\0\2\10"+
    "\1\134\14\10\1\0\26\10\16\0\2\10\2\0\15\10"+
    "\1\135\1\10\1\0\4\10\1\136\21\10\16\0\2\10"+
    "\2\0\14\10\1\137\2\10\1\0\26\10\16\0\2\10"+
    "\2\0\5\10\1\140\10\10\1\141\1\0\26\10\16\0"+
    "\2\10\2\0\4\10\1\142\12\10\1\0\26\10\16\0"+
    "\2\10\2\0\4\10\1\143\12\10\1\0\26\10\16\0"+
    "\2\10\2\0\17\10\1\0\3\10\1\144\22\10\16\0"+
    "\2\10\2\0\17\10\1\0\4\10\1\145\21\10\16\0"+
    "\2\10\2\0\10\10\1\146\6\10\1\0\26\10\16\0"+
    "\2\10\2\0\5\10\1\147\5\10\1\150\3\10\1\0"+
    "\26\10\16\0\2\10\2\0\14\10\1\151\1\152\1\10"+
    "\1\0\26\10\16\0\2\10\2\0\1\10\1\153\15\10"+
    "\1\0\26\10\16\0\2\10\2\0\16\10\1\154\1\0"+
    "\26\10\16\0\2\10\2\0\17\10\1\0\10\10\1\155"+
    "\15\10\16\0\2\10\2\0\17\10\1\0\20\10\1\156"+
    "\5\10\16\0\2\10\2\0\17\10\1\0\14\10\1\157"+
    "\11\10\16\0\2\10\1\0\50\104\1\27\17\104\50\160"+
    "\1\0\10\160\1\110\6\160\1\0\17\111\1\0\26\111"+
    "\17\0\1\111\2\0\3\10\1\161\13\10\1\0\26\10"+
    "\16\0\2\10\2\0\4\10\1\162\12\10\1\0\26\10"+
    "\16\0\2\10\2\0\11\10\1\163\5\10\1\0\26\10"+
    "\16\0\2\10\2\0\1\10\1\164\15\10\1\0\26\10"+
    "\16\0\2\10\2\0\1\165\16\10\1\0\26\10\16\0"+
    "\2\10\2\0\13\10\1\166\3\10\1\0\26\10\16\0"+
    "\2\10\2\0\1\167\16\10\1\0\26\10\16\0\2\10"+
    "\2\0\13\10\1\170\3\10\1\0\26\10\16\0\2\10"+
    "\2\0\5\10\1\171\11\10\1\0\26\10\16\0\2\10"+
    "\2\0\5\10\1\172\11\10\1\0\26\10\16\0\2\10"+
    "\2\0\5\10\1\173\11\10\1\0\26\10\16\0\2\10"+
    "\2\0\10\10\1\174\6\10\1\0\26\10\16\0\2\10"+
    "\2\0\1\175\16\10\1\0\26\10\16\0\2\10\2\0"+
    "\1\176\16\10\1\0\26\10\16\0\2\10\2\0\1\177"+
    "\16\10\1\0\26\10\16\0\2\10\2\0\4\10\1\200"+
    "\12\10\1\0\26\10\16\0\2\10\2\0\1\201\4\10"+
    "\1\202\11\10\1\0\26\10\16\0\2\10\2\0\1\203"+
    "\16\10\1\0\26\10\16\0\2\10\2\0\4\10\1\204"+
    "\12\10\1\0\26\10\16\0\2\10\2\0\2\10\1\205"+
    "\14\10\1\0\26\10\16\0\2\10\2\0\4\10\1\206"+
    "\12\10\1\0\26\10\16\0\2\10\2\0\15\10\1\207"+
    "\1\10\1\0\26\10\16\0\2\10\2\0\1\210\16\10"+
    "\1\0\26\10\16\0\2\10\2\0\5\10\1\211\3\10"+
    "\1\212\5\10\1\0\26\10\16\0\2\10\2\0\17\10"+
    "\1\0\3\10\1\213\22\10\16\0\2\10\2\0\4\10"+
    "\1\214\12\10\1\0\26\10\16\0\2\10\2\0\6\10"+
    "\1\215\10\10\1\0\26\10\16\0\2\10\2\0\11\10"+
    "\1\216\5\10\1\0\26\10\16\0\2\10\2\0\5\10"+
    "\1\217\11\10\1\0\26\10\16\0\2\10\2\0\4\10"+
    "\1\220\12\10\1\0\26\10\16\0\2\10\2\0\4\10"+
    "\1\221\12\10\1\0\26\10\16\0\2\10\2\0\12\10"+
    "\1\222\4\10\1\0\26\10\16\0\2\10\2\0\10\10"+
    "\1\223\6\10\1\0\26\10\16\0\2\10\2\0\17\10"+
    "\1\0\11\10\1\224\14\10\16\0\2\10\2\0\17\10"+
    "\1\0\21\10\1\225\4\10\16\0\2\10\2\0\17\10"+
    "\1\0\24\10\1\226\1\10\16\0\2\10\2\0\4\10"+
    "\1\227\12\10\1\0\26\10\16\0\2\10\2\0\16\10"+
    "\1\230\1\0\26\10\16\0\2\10\2\0\13\10\1\231"+
    "\3\10\1\0\26\10\16\0\2\10\2\0\11\10\1\232"+
    "\5\10\1\0\26\10\16\0\2\10\2\0\14\10\1\233"+
    "\2\10\1\0\26\10\16\0\2\10\2\0\17\10\1\234"+
    "\26\10\16\0\2\10\2\0\15\10\1\235\1\10\1\0"+
    "\26\10\16\0\2\10\2\0\15\10\1\236\1\10\1\0"+
    "\26\10\16\0\2\10\2\0\17\10\1\0\3\10\1\237"+
    "\22\10\16\0\2\10\2\0\1\240\16\10\1\0\26\10"+
    "\16\0\2\10\2\0\1\10\1\241\15\10\1\0\26\10"+
    "\16\0\2\10\2\0\5\10\1\242\11\10\1\0\26\10"+
    "\16\0\2\10\2\0\10\10\1\243\6\10\1\0\26\10"+
    "\16\0\2\10\2\0\11\10\1\244\5\10\1\0\26\10"+
    "\16\0\2\10\2\0\16\10\1\245\1\0\26\10\16\0"+
    "\2\10\2\0\5\10\1\246\11\10\1\0\26\10\16\0"+
    "\2\10\2\0\4\10\1\247\12\10\1\0\26\10\16\0"+
    "\2\10\2\0\1\10\1\250\15\10\1\0\1\251\25\10"+
    "\16\0\2\10\2\0\17\10\1\0\3\10\1\252\22\10"+
    "\16\0\2\10\2\0\1\253\16\10\1\0\26\10\16\0"+
    "\2\10\2\0\1\254\16\10\1\0\26\10\16\0\2\10"+
    "\2\0\11\10\1\255\5\10\1\0\26\10\16\0\2\10"+
    "\2\0\1\256\16\10\1\0\26\10\16\0\2\10\2\0"+
    "\3\10\1\257\13\10\1\0\26\10\16\0\2\10\2\0"+
    "\2\10\1\260\14\10\1\0\26\10\16\0\2\10\2\0"+
    "\5\10\1\261\11\10\1\0\26\10\16\0\2\10\2\0"+
    "\3\10\1\262\13\10\1\0\26\10\16\0\2\10\2\0"+
    "\11\10\1\263\5\10\1\0\26\10\16\0\2\10\2\0"+
    "\16\10\1\264\1\0\26\10\16\0\2\10\2\0\1\265"+
    "\16\10\1\0\26\10\16\0\2\10\2\0\16\10\1\266"+
    "\1\0\26\10\16\0\2\10\2\0\17\10\1\0\7\10"+
    "\1\267\16\10\16\0\2\10\2\0\17\10\1\0\12\10"+
    "\1\270\13\10\16\0\2\10\2\0\17\10\1\0\12\10"+
    "\1\271\13\10\16\0\2\10\2\0\5\10\1\272\11\10"+
    "\1\0\26\10\16\0\2\10\2\0\11\10\1\273\5\10"+
    "\1\0\1\10\1\274\24\10\16\0\2\10\2\0\11\10"+
    "\1\275\5\10\1\0\26\10\16\0\2\10\2\0\4\10"+
    "\1\276\12\10\1\0\26\10\16\0\2\10\2\0\14\10"+
    "\1\277\2\10\1\0\26\10\16\0\2\10\4\0\1\300"+
    "\4\0\1\301\60\0\1\302\16\10\1\0\26\10\16\0"+
    "\2\10\2\0\1\303\16\10\1\0\26\10\16\0\2\10"+
    "\2\0\17\10\1\304\26\10\16\0\2\10\2\0\4\10"+
    "\1\305\12\10\1\0\26\10\16\0\2\10\2\0\5\10"+
    "\1\306\11\10\1\0\26\10\16\0\2\10\2\0\17\10"+
    "\1\307\26\10\16\0\2\10\2\0\3\10\1\310\13\10"+
    "\1\0\26\10\16\0\2\10\2\0\11\10\1\311\5\10"+
    "\1\0\26\10\16\0\2\10\2\0\5\10\1\312\11\10"+
    "\1\0\26\10\16\0\2\10\2\0\10\10\1\313\6\10"+
    "\1\0\26\10\16\0\2\10\2\0\12\10\1\314\4\10"+
    "\1\0\26\10\16\0\2\10\2\0\1\315\16\10\1\0"+
    "\26\10\16\0\2\10\2\0\11\10\1\316\5\10\1\0"+
    "\26\10\16\0\2\10\2\0\5\10\1\317\11\10\1\0"+
    "\26\10\16\0\2\10\2\0\5\10\1\320\11\10\1\0"+
    "\26\10\16\0\2\10\2\0\6\10\1\321\10\10\1\0"+
    "\26\10\16\0\2\10\2\0\1\322\16\10\1\0\26\10"+
    "\16\0\2\10\2\0\3\10\1\323\13\10\1\0\26\10"+
    "\16\0\2\10\2\0\4\10\1\324\12\10\1\0\26\10"+
    "\16\0\2\10\2\0\10\10\1\325\6\10\1\0\26\10"+
    "\16\0\2\10\2\0\4\10\1\326\12\10\1\0\26\10"+
    "\16\0\2\10\2\0\17\10\1\327\26\10\16\0\2\10"+
    "\2\0\17\10\1\0\12\10\1\330\13\10\16\0\2\10"+
    "\2\0\17\10\1\0\7\10\1\331\16\10\16\0\2\10"+
    "\2\0\17\10\1\0\7\10\1\332\16\10\16\0\2\10"+
    "\2\0\3\10\1\333\13\10\1\0\26\10\16\0\2\10"+
    "\2\0\5\10\1\334\11\10\1\0\26\10\16\0\2\10"+
    "\2\0\1\335\16\10\1\0\26\10\16\0\2\10\2\0"+
    "\1\336\16\10\1\0\26\10\16\0\2\10\2\0\3\10"+
    "\1\337\13\10\1\0\26\10\16\0\2\10\6\0\1\340"+
    "\66\0\1\341\64\0\5\10\1\342\11\10\1\0\26\10"+
    "\16\0\2\10\5\0\1\343\64\0\1\344\16\10\1\0"+
    "\26\10\16\0\2\10\2\0\13\10\1\345\3\10\1\0"+
    "\26\10\16\0\2\10\22\0\1\346\47\0\11\10\1\347"+
    "\5\10\1\0\26\10\16\0\2\10\2\0\17\10\1\350"+
    "\26\10\16\0\2\10\2\0\15\10\1\351\1\10\1\0"+
    "\26\10\16\0\2\10\2\0\10\10\1\352\6\10\1\0"+
    "\26\10\16\0\2\10\2\0\5\10\1\353\11\10\1\0"+
    "\26\10\16\0\2\10\2\0\11\10\1\354\5\10\1\0"+
    "\26\10\16\0\2\10\2\0\17\10\1\355\26\10\16\0"+
    "\2\10\2\0\1\356\16\10\1\0\26\10\16\0\2\10"+
    "\2\0\1\357\16\10\1\0\26\10\16\0\2\10\2\0"+
    "\15\10\1\360\1\10\1\0\26\10\16\0\2\10\2\0"+
    "\2\10\1\361\14\10\1\0\26\10\16\0\2\10\2\0"+
    "\13\10\1\362\3\10\1\0\26\10\16\0\2\10\2\0"+
    "\5\10\1\363\11\10\1\0\26\10\16\0\2\10\4\0"+
    "\1\364\65\0\17\10\1\0\13\10\1\365\12\10\16\0"+
    "\2\10\2\0\17\10\1\0\12\10\1\366\13\10\16\0"+
    "\2\10\2\0\17\10\1\0\23\10\1\367\2\10\16\0"+
    "\2\10\2\0\6\10\1\370\10\10\1\0\26\10\16\0"+
    "\2\10\2\0\1\371\16\10\1\0\26\10\16\0\2\10"+
    "\2\0\5\10\1\372\11\10\1\0\26\10\16\0\2\10"+
    "\2\0\5\10\1\373\11\10\1\0\26\10\16\0\2\10"+
    "\2\0\6\10\1\374\10\10\1\0\26\10\16\0\2\10"+
    "\20\0\1\375\55\0\1\376\63\0\17\10\1\377\26\10"+
    "\16\0\2\10\22\0\1\u0100\47\0\5\10\1\u0101\11\10"+
    "\1\0\26\10\16\0\2\10\2\0\17\10\1\0\1\u0102"+
    "\25\10\16\0\2\10\7\0\1\u0103\62\0\1\u0104\16\10"+
    "\1\0\26\10\16\0\2\10\22\0\1\u0105\47\0\15\10"+
    "\1\u0106\1\10\1\0\26\10\16\0\2\10\2\0\16\10"+
    "\1\u0107\1\0\26\10\16\0\2\10\2\0\1\u0108\16\10"+
    "\1\0\26\10\16\0\2\10\22\0\1\u0109\47\0\15\10"+
    "\1\u010a\1\10\1\0\26\10\16\0\2\10\2\0\11\10"+
    "\1\u010b\5\10\1\0\26\10\16\0\2\10\6\0\1\u010c"+
    "\63\0\17\10\1\0\13\10\1\u010d\12\10\16\0\2\10"+
    "\2\0\17\10\1\0\22\10\1\u010e\3\10\16\0\2\10"+
    "\2\0\17\10\1\0\10\10\1\u010f\15\10\16\0\2\10"+
    "\2\0\1\u0110\16\10\1\0\26\10\16\0\2\10\2\0"+
    "\17\10\1\u0111\26\10\16\0\2\10\2\0\1\u0112\16\10"+
    "\1\0\26\10\16\0\2\10\2\0\1\u0113\16\10\1\0"+
    "\26\10\16\0\2\10\10\0\1\u0114\104\0\1\u0115\44\0"+
    "\1\u0116\17\0\1\u0117\67\0\1\u0118\47\0\11\10\1\u0119"+
    "\5\10\1\0\26\10\16\0\2\10\12\0\1\u011a\57\0"+
    "\13\10\1\u011b\3\10\1\0\26\10\16\0\2\10\5\0"+
    "\1\u011c\64\0\3\10\1\u011d\13\10\1\0\26\10\16\0"+
    "\2\10\2\0\1\u011e\16\10\1\0\26\10\16\0\2\10"+
    "\5\0\1\u011f\64\0\1\u0120\16\10\1\0\26\10\16\0"+
    "\2\10\20\0\1\u0121\51\0\17\10\1\0\14\10\1\u0122"+
    "\11\10\16\0\2\10\2\0\17\10\1\0\23\10\1\u0123"+
    "\2\10\16\0\2\10\25\0\1\u0124\44\0\1\u0125\112\0"+
    "\1\u0126\45\0\1\u0127\71\0\1\u0128\67\0\1\u0129\64\0"+
    "\1\u012a\16\10\1\0\26\10\16\0\2\10\24\0\1\u012b"+
    "\45\0\5\10\1\u012c\11\10\1\0\26\10\16\0\2\10"+
    "\7\0\1\u012d\62\0\16\10\1\u012e\1\0\26\10\16\0"+
    "\2\10\7\0\1\u012f\62\0\5\10\1\u0130\11\10\1\0"+
    "\26\10\16\0\2\10\10\0\1\u0131\61\0\17\10\1\u0132"+
    "\26\10\16\0\2\10\2\0\17\10\1\0\10\10\1\u0133"+
    "\15\10\16\0\2\10\3\0\1\u0134\66\0\1\u0135\77\0"+
    "\1\u0136\64\0\1\u0137\67\0\1\u0138\62\0\13\10\1\u0139"+
    "\3\10\1\0\26\10\16\0\2\10\13\0\1\u013a\56\0"+
    "\17\10\1\0\1\10\1\u013b\24\10\16\0\2\10\13\0"+
    "\1\u013c\56\0\1\u013d\124\0\1\u013e\32\0\17\10\1\0"+
    "\24\10\1\u013f\1\10\16\0\2\10\2\0\1\u0140\71\0"+
    "\1\u0141\76\0\1\u0142\56\0\1\u0143\67\0\5\10\1\u0144"+
    "\11\10\1\0\26\10\16\0\2\10\6\0\1\u0145\63\0"+
    "\1\u0146\16\10\1\0\26\10\16\0\2\10\6\0\1\u0147"+
    "\113\0\1\u0148\37\0\17\10\1\u0149\26\10\16\0\2\10"+
    "\20\0\1\u014a\53\0\1\u014b\71\0\1\u014c\67\0\1\u014d"+
    "\63\0\1\u014e\67\0\1\u014f\122\0\1\u0150\66\0\1\u0151"+
    "\4\0\1\u0152\1\u0153\2\0\1\u0154\27\0\1\u0155\64\0"+
    "\1\u0156\67\0\1\u0157\71\0\1\u0158\67\0\1\u0159\67\0"+
    "\1\u015a\123\0\1\u015b\57\0\1\u015c\101\0\1\u015d\57\0"+
    "\1\u015e\103\0\1\u015f\30\0\1\u0160\64\0\1\u0161\124\0"+
    "\1\u0162\56\0\1\u0163\75\0\1\u0164\66\0\1\u0165\76\0"+
    "\1\u0166\31\0\1\u0167\115\0\1\u0168\101\0\1\u0169\56\0"+
    "\1\u016a\70\0\1\u016b\43\0\1\u016c\106\0\1\u016d\72\0"+
    "\1\u016e\67\0\1\u016f\64\0\1\u0170\74\0\1\u0171\62\0"+
    "\1\u0172\104\0\1\u0173\70\0\1\u0174\65\0\1\u0175\67\0"+
    "\1\u0176\61\0\1\u0177\64\0\1\u0178\76\0\1\u0179\71\0"+
    "\1\u017a\60\0\1\u017b\73\0\1\u017c\66\0\1\u017d\67\0"+
    "\1\u017e\64\0\1\u017f\72\0\1\u0180\27\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17920];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\14\1\1\11\7\1\5\11\1\1\3\11"+
    "\1\1\3\11\40\1\1\0\1\11\1\0\1\11\50\1"+
    "\1\0\53\1\1\0\43\1\2\0\2\1\1\0\2\1"+
    "\1\0\17\1\1\0\10\1\2\0\1\1\1\0\2\1"+
    "\1\0\1\1\1\0\4\1\1\0\6\1\1\0\10\1"+
    "\4\0\2\1\1\0\1\1\1\0\3\1\1\0\2\1"+
    "\1\0\4\1\1\0\2\1\5\0\1\1\1\0\1\1"+
    "\1\0\2\1\1\0\1\1\1\0\2\1\1\0\1\11"+
    "\4\0\1\1\1\11\1\1\1\0\1\1\1\0\1\1"+
    "\2\0\1\1\2\0\1\11\2\0\1\1\1\0\1\1"+
    "\1\0\1\11\1\0\1\1\4\0\1\1\1\0\1\1"+
    "\17\0\1\11\1\0\3\11\6\0\2\11\11\0\1\11"+
    "\15\0\1\11\2\0\2\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[384];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	public int getYyLine(){
		return yyline+1;
	}
	public int getYyColumn(){
		return yycolumn+1;
	}
	public String getYyText(){
		return yytext();
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Yylex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 148) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 42: 
          { return new Symbol(sym.ALLUMER);
          }
        case 76: break;
        case 69: 
          { return new Symbol(sym.ALLUMER_PARTIEL);
          }
        case 77: break;
        case 38: 
          { return new Symbol(sym.OUVERT);
          }
        case 78: break;
        case 21: 
          { System.out.println("Erreur ligne "+(yyline+1)+" colonne "+(yycolumn+1)+" : "+yytext()+" => fin de chaine attendue ! ");
          }
        case 79: break;
        case 35: 
          { return new Symbol(sym.ETEINT);
          }
        case 80: break;
        case 52: 
          { return new Symbol(sym.SCENARIO);
          }
        case 81: break;
        case 8: 
          { return new Symbol(sym.ACO_GAUCHE);
          }
        case 82: break;
        case 74: 
          { return new Symbol(sym.DECLARATION_COMMANDES);
          }
        case 83: break;
        case 24: 
          { return new Symbol(sym.ECO);
          }
        case 84: break;
        case 65: 
          { return new Symbol(sym.LAVE_VAISSELLE);
          }
        case 85: break;
        case 28: 
          { return new Symbol(sym.FAIT);
          }
        case 86: break;
        case 49: 
          { return new Symbol(sym.ASSOCIER);
          }
        case 87: break;
        case 54: 
          { return new Symbol(sym.CAFETIERE);
          }
        case 88: break;
        case 23: 
          { System.out.println("Erreur ligne "+(yyline+1)+" colonne "+(yycolumn+1)+" : "+yytext()+" => syntaxe identificateur non respectee ! ");
          }
        case 89: break;
        case 47: 
          { return new Symbol(sym.DEFINIR);
          }
        case 90: break;
        case 15: 
          { return new Symbol(sym.VIRGULE);
          }
        case 91: break;
        case 26: 
          { return new Symbol(sym.ETAT);
          }
        case 92: break;
        case 19: 
          { return new Symbol(sym.SI);
          }
        case 93: break;
        case 40: 
          { return new Symbol(sym.FERMER);
          }
        case 94: break;
        case 27: 
          { return new Symbol(sym.HIFI);
          }
        case 95: break;
        case 70: 
          { return new Symbol(sym.PROGRAMME_DOMUS);
          }
        case 96: break;
        case 7: 
          { return new Symbol(sym.PAR_DROITE);
          }
        case 97: break;
        case 58: 
          { return new Symbol(sym.VIDEO_PROJ);
          }
        case 98: break;
        case 12: 
          { return new Symbol(sym.CHEVRON_GAUCHE);
          }
        case 99: break;
        case 34: 
          { return new Symbol(sym.SINON);
          }
        case 100: break;
        case 63: 
          { return new Symbol(sym.INTERRUPTEUR);
          }
        case 101: break;
        case 3: 
          { return new Symbol(sym.UNDERSCORE);
          }
        case 102: break;
        case 56: 
          { return new Symbol(sym.TELEPHONE);
          }
        case 103: break;
        case 39: 
          { return new Symbol(sym.OUVRIR);
          }
        case 104: break;
        case 6: 
          { return new Symbol(sym.PAR_GAUCHE);
          }
        case 105: break;
        case 64: 
          { return new Symbol(sym.TELECOMMANDE);
          }
        case 106: break;
        case 1: 
          { System.out.println("Erreur ligne "+(yyline+1)+" colonne "+(yycolumn+1)+" : "+yytext()+" => caractÃšre inconnu ! ");
          }
        case 107: break;
        case 45: 
          { return new Symbol(sym.MESSAGE);
          }
        case 108: break;
        case 22: 
          { return new Symbol(sym.CHAINE, new String(yytext()));
          }
        case 109: break;
        case 73: 
          { return new Symbol(sym.DECLARATION_APPAREILS);
          }
        case 110: break;
        case 50: 
          { return new Symbol(sym.TABLETTE);
          }
        case 111: break;
        case 55: 
          { return new Symbol(sym.CHAUFFAGE);
          }
        case 112: break;
        case 66: 
          { return new Symbol(sym.AUTRE_APPAREIL);
          }
        case 113: break;
        case 14: 
          { return new Symbol(sym.POINT);
          }
        case 114: break;
        case 71: 
          { return new Symbol(sym.EXECUTER_SCENARIO);
          }
        case 115: break;
        case 51: 
          { return new Symbol(sym.POURTOUT);
          }
        case 116: break;
        case 4: 
          { return new Symbol(sym.SLASH);
          }
        case 117: break;
        case 41: 
          { return new Symbol(sym.MOBILE);
          }
        case 118: break;
        case 25: 
          { return new Symbol(sym.FSI);
          }
        case 119: break;
        case 29: 
          { return new Symbol(sym.DEMI);
          }
        case 120: break;
        case 32: 
          { return new Symbol(sym.FERME);
          }
        case 121: break;
        case 43: 
          { return new Symbol(sym.TAMISER);
          }
        case 122: break;
        case 75: 
          { return new Symbol(sym.DECLARATION_INTERFACES);
          }
        case 123: break;
        case 16: 
          { return new Symbol(sym.DEUX_POINT);
          }
        case 124: break;
        case 20: 
          { return new Symbol(sym.EGALITE);
          }
        case 125: break;
        case 10: 
          { return new Symbol(sym.AFFECTATION);
          }
        case 126: break;
        case 37: 
          { return new Symbol(sym.ALARME);
          }
        case 127: break;
        case 57: 
          { return new Symbol(sym.LAVE_LINGE);
          }
        case 128: break;
        case 44: 
          { return new Symbol(sym.FENETRE);
          }
        case 129: break;
        case 31: 
          { return new Symbol(sym.VOLET);
          }
        case 130: break;
        case 48: 
          { return new Symbol(sym.ETEINDRE);
          }
        case 131: break;
        case 46: 
          { return new Symbol(sym.PORTAIL);
          }
        case 132: break;
        case 61: 
          { return new Symbol(sym.ALLUMER_ECO);
          }
        case 133: break;
        case 53: 
          { return new Symbol(sym.ECLAIRAGE);
          }
        case 134: break;
        case 33: 
          { return new Symbol(sym.FAIRE);
          }
        case 135: break;
        case 13: 
          { return new Symbol(sym.CHEVRON_DROIT);
          }
        case 136: break;
        case 30: 
          { return new Symbol(sym.ALORS);
          }
        case 137: break;
        case 60: 
          { return new Symbol(sym.PROGRAMMER);
          }
        case 138: break;
        case 36: 
          { return new Symbol(sym.ALLUME);
          }
        case 139: break;
        case 2: 
          { return new Symbol(sym.IDENTIFIANT, new String(yytext()));
          }
        case 140: break;
        case 62: 
          { return new Symbol(sym.SECHE_LINGE);
          }
        case 141: break;
        case 59: 
          { return new Symbol(sym.ORDINATEUR);
          }
        case 142: break;
        case 67: 
          { return new Symbol(sym.OUVRIR_PARTIEL);
          }
        case 143: break;
        case 9: 
          { return new Symbol(sym.ACO_DROITE);
          }
        case 144: break;
        case 18: 
          { return new Symbol(sym.TV);
          }
        case 145: break;
        case 11: 
          { return new Symbol(sym.POINT_VIRGULE);
          }
        case 146: break;
        case 68: 
          { return new Symbol(sym.FERMER_PARTIEL);
          }
        case 147: break;
        case 17: 
          { return new Symbol(sym.ENTIER, new Integer(yytext()));
          }
        case 148: break;
        case 72: 
          { return new Symbol(sym.DECLARATION_SCENARII);
          }
        case 149: break;
        case 5: 
          { 
          }
        case 150: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
