
//----------------------------------------------------
// The following code was generated by CUP v0.10k TUM Edition 20050516
// Thu Dec 08 12:02:01 CET 2016
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.FileWriter;
import java.io.File;
import java.io.BufferedWriter;
import java.io.IOException;

/** CUP v0.10k TUM Edition 20050516 generated parser.
  * @version Thu Dec 08 12:02:01 CET 2016
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\201\000\002\003\003\000\002\002\004\000\002\003" +
    "\002\000\002\073\002\000\002\004\006\000\002\007\005" +
    "\000\002\010\004\000\002\010\004\000\002\074\002\000" +
    "\002\013\006\000\002\027\004\000\002\027\003\000\002" +
    "\030\003\000\002\030\003\000\002\030\003\000\002\044" +
    "\005\000\002\044\005\000\002\044\004\000\002\045\005" +
    "\000\002\075\002\000\002\065\007\000\002\046\011\000" +
    "\002\076\002\000\002\014\006\000\002\031\004\000\002" +
    "\031\003\000\002\032\003\000\002\033\005\000\002\067" +
    "\003\000\002\067\005\000\002\067\004\000\002\067\004" +
    "\000\002\077\002\000\002\011\006\000\002\023\004\000" +
    "\002\023\003\000\002\100\002\000\002\024\006\000\002" +
    "\036\004\000\002\036\003\000\002\037\003\000\002\037" +
    "\003\000\002\037\003\000\002\037\003\000\002\037\003" +
    "\000\002\040\004\000\002\054\005\000\002\101\002\000" +
    "\002\102\002\000\002\041\014\000\002\103\002\000\002" +
    "\104\002\000\002\105\002\000\002\042\014\000\002\053" +
    "\004\000\002\106\002\000\002\107\002\000\002\053\010" +
    "\000\002\043\007\000\002\047\005\000\002\050\007\000" +
    "\002\110\002\000\002\012\006\000\002\034\004\000\002" +
    "\034\003\000\002\035\003\000\002\035\003\000\002\051" +
    "\007\000\002\051\011\000\002\052\007\000\002\052\011" +
    "\000\002\071\005\000\002\071\003\000\002\070\015\000" +
    "\002\072\003\000\002\072\003\000\002\005\005\000\002" +
    "\006\006\000\002\015\005\000\002\016\006\000\002\017" +
    "\005\000\002\020\006\000\002\021\005\000\002\022\006" +
    "\000\002\055\006\000\002\056\007\000\002\025\005\000" +
    "\002\026\006\000\002\066\003\000\002\066\003\000\002" +
    "\063\003\000\002\063\003\000\002\063\003\000\002\063" +
    "\003\000\002\057\003\000\002\057\003\000\002\057\003" +
    "\000\002\057\003\000\002\057\003\000\002\061\003\000" +
    "\002\061\003\000\002\061\003\000\002\061\003\000\002" +
    "\061\003\000\002\060\003\000\002\060\003\000\002\060" +
    "\003\000\002\060\003\000\002\060\003\000\002\060\003" +
    "\000\002\060\003\000\002\060\003\000\002\060\003\000" +
    "\002\062\003\000\002\062\003\000\002\062\003\000\002" +
    "\062\003\000\002\062\003\000\002\062\003\000\002\062" +
    "\003\000\002\062\003\000\002\062\003\000\002\062\003" +
    "\000\002\064\003\000\002\064\003\000\002\064\003\000" +
    "\002\064\003\000\002\064\003\000\002\064\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\374\000\006\002\uffff\101\005\001\002\000\004\101" +
    "\ufffe\001\002\000\004\064\011\001\002\000\004\002\001" +
    "\001\002\000\004\002\010\001\002\000\004\002\000\001" +
    "\002\000\004\102\012\001\002\000\004\101\uffb5\001\002" +
    "\000\004\101\017\001\002\000\004\101\375\001\002\000" +
    "\014\012\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\001\002" +
    "\000\020\004\ufff9\005\ufff9\006\ufff9\007\ufff9\010\ufff9\011" +
    "\ufff9\057\ufff9\001\002\000\006\065\025\066\322\001\002" +
    "\000\004\101\315\001\002\000\004\101\031\001\002\000" +
    "\004\101\024\001\002\000\004\101\ufffa\001\002\000\004" +
    "\065\025\001\002\000\004\102\026\001\002\000\020\004" +
    "\uffb3\005\uffb3\006\uffb3\007\uffb3\010\uffb3\011\uffb3\057\uffb3" +
    "\001\002\000\004\101\225\001\002\000\004\101\uffe1\001" +
    "\002\000\004\067\032\001\002\000\004\102\033\001\002" +
    "\000\004\101\uffaf\001\002\000\004\101\036\001\002\000" +
    "\004\101\220\001\002\000\004\071\214\001\002\000\004" +
    "\101\uffde\001\002\000\014\050\uffdd\053\uffdd\060\uffdd\063" +
    "\uffdd\111\uffdd\001\002\000\014\050\044\053\056\060\054" +
    "\063\045\111\053\001\002\000\024\050\uffd6\052\uffd6\053" +
    "\uffd6\055\uffd6\056\uffd6\060\uffd6\063\uffd6\101\uffd6\111\uffd6" +
    "\001\002\000\024\050\uffd9\052\uffd9\053\uffd9\055\uffd9\056" +
    "\uffd9\060\uffd9\063\uffd9\101\uffd9\111\uffd9\001\002\000\004" +
    "\111\145\001\002\000\004\072\141\001\002\000\016\050" +
    "\044\053\056\060\054\063\045\101\133\111\053\001\002" +
    "\000\024\050\uffda\052\uffda\053\uffda\055\uffda\056\uffda\060" +
    "\uffda\063\uffda\101\uffda\111\uffda\001\002\000\024\050\uffd5" +
    "\052\uffd5\053\uffd5\055\uffd5\056\uffd5\060\uffd5\063\uffd5\101" +
    "\uffd5\111\uffd5\001\002\000\024\050\uffd7\052\uffd7\053\uffd7" +
    "\055\uffd7\056\uffd7\060\uffd7\063\uffd7\101\uffd7\111\uffd7\001" +
    "\002\000\024\050\uffd8\052\uffd8\053\uffd8\055\uffd8\056\uffd8" +
    "\060\uffd8\063\uffd8\101\uffd8\111\uffd8\001\002\000\004\105" +
    "\117\001\002\000\004\111\115\001\002\000\004\100\114" +
    "\001\002\000\004\072\057\001\002\000\004\111\uffcf\001" +
    "\002\000\004\111\061\001\002\000\004\105\102\001\002" +
    "\000\004\073\063\001\002\000\004\054\064\001\002\000" +
    "\014\050\uffce\053\uffce\060\uffce\063\uffce\111\uffce\001\002" +
    "\000\014\050\044\053\056\060\054\063\045\111\053\001" +
    "\002\000\020\050\044\053\056\055\uffcd\056\uffcd\060\054" +
    "\063\045\111\053\001\002\000\024\050\uffdb\052\uffdb\053" +
    "\uffdb\055\uffdb\056\uffdb\060\uffdb\063\uffdb\101\uffdb\111\uffdb" +
    "\001\002\000\006\055\071\056\073\001\002\000\014\050" +
    "\uffca\053\uffca\060\uffca\063\uffca\111\uffca\001\002\000\024" +
    "\050\uffcc\052\uffcc\053\uffcc\055\uffcc\056\uffcc\060\uffcc\063" +
    "\uffcc\101\uffcc\111\uffcc\001\002\000\004\100\074\001\002" +
    "\000\024\050\uffcb\052\uffcb\053\uffcb\055\uffcb\056\uffcb\060" +
    "\uffcb\063\uffcb\101\uffcb\111\uffcb\001\002\000\014\050\044" +
    "\053\056\060\054\063\045\111\053\001\002\000\016\050" +
    "\044\053\056\056\uffc9\060\054\063\045\111\053\001\002" +
    "\000\004\056\100\001\002\000\004\100\101\001\002\000" +
    "\024\050\uffc8\052\uffc8\053\uffc8\055\uffc8\056\uffc8\060\uffc8" +
    "\063\uffc8\101\uffc8\111\uffc8\001\002\000\004\043\103\001" +
    "\002\000\004\077\104\001\002\000\016\030\107\031\110" +
    "\032\111\033\113\034\105\035\106\001\002\000\004\073" +
    "\uff82\001\002\000\004\073\uff81\001\002\000\004\073\uff86" +
    "\001\002\000\004\073\uff85\001\002\000\004\073\uff84\001" +
    "\002\000\004\073\uffc7\001\002\000\004\073\uff83\001\002" +
    "\000\024\050\uffd4\052\uffd4\053\uffd4\055\uffd4\056\uffd4\060" +
    "\uffd4\063\uffd4\101\uffd4\111\uffd4\001\002\000\004\100\116" +
    "\001\002\000\024\050\uffc6\052\uffc6\053\uffc6\055\uffc6\056" +
    "\uffc6\060\uffc6\063\uffc6\101\uffc6\111\uffc6\001\002\000\026" +
    "\036\125\037\121\040\130\041\131\042\123\043\132\044" +
    "\124\045\120\046\127\047\122\001\002\000\004\100\uff89" +
    "\001\002\000\004\100\uff8f\001\002\000\004\100\uff87\001" +
    "\002\000\004\100\uff8c\001\002\000\004\100\uff8a\001\002" +
    "\000\004\100\uff90\001\002\000\004\100\uffd3\001\002\000" +
    "\004\100\uff88\001\002\000\004\100\uff8e\001\002\000\004" +
    "\100\uff8d\001\002\000\004\100\uff8b\001\002\000\004\103" +
    "\135\001\002\000\004\101\uffdc\001\002\000\004\071\136" +
    "\001\002\000\004\111\137\001\002\000\004\102\140\001" +
    "\002\000\004\101\uffac\001\002\000\004\112\142\001\002" +
    "\000\004\073\143\001\002\000\004\100\144\001\002\000" +
    "\024\050\uffc5\052\uffc5\053\uffc5\055\uffc5\056\uffc5\060\uffc5" +
    "\063\uffc5\101\uffc5\111\uffc5\001\002\000\004\107\146\001" +
    "\002\000\054\004\200\005\165\006\163\007\201\010\152" +
    "\011\175\012\155\013\171\014\167\015\166\016\161\017" +
    "\173\020\160\021\156\022\150\023\170\024\164\025\174" +
    "\026\177\027\154\111\162\001\002\000\004\051\uffa6\001" +
    "\002\000\006\051\uff96\073\uff96\001\002\000\004\051\uffa8" +
    "\001\002\000\010\003\uff9f\051\uff9f\111\uff9f\001\002\000" +
    "\004\051\uffa7\001\002\000\006\051\uff92\073\uff92\001\002" +
    "\000\010\003\uff9e\051\uff9e\111\uff9e\001\002\000\006\051" +
    "\uff97\073\uff97\001\002\000\004\051\uffa5\001\002\000\006" +
    "\051\uff98\073\uff98\001\002\000\010\003\uff9a\051\uff9a\111" +
    "\uff9a\001\002\000\004\051\uffa4\001\002\000\010\003\uffa1" +
    "\051\uffa1\111\uffa1\001\002\000\006\051\uff94\073\uff94\001" +
    "\002\000\010\003\uffa2\051\uffa2\111\uffa2\001\002\000\010" +
    "\003\uff9b\051\uff9b\111\uff9b\001\002\000\010\003\uff9c\051" +
    "\uff9c\111\uff9c\001\002\000\006\051\uff95\073\uff95\001\002" +
    "\000\010\003\uff9d\051\uff9d\111\uff9d\001\002\000\004\051" +
    "\206\001\002\000\006\051\uff99\073\uff99\001\002\000\006" +
    "\051\uff93\073\uff93\001\002\000\004\072\202\001\002\000" +
    "\004\051\uffa9\001\002\000\006\051\uff91\073\uff91\001\002" +
    "\000\010\003\uffa3\051\uffa3\111\uffa3\001\002\000\010\003" +
    "\uffa0\051\uffa0\111\uffa0\001\002\000\024\017\173\020\160" +
    "\021\156\022\150\023\170\024\164\025\174\026\177\027" +
    "\154\001\002\000\004\073\uffee\001\002\000\004\073\205" +
    "\001\002\000\010\003\uffed\051\uffed\111\uffed\001\002\000" +
    "\014\050\uffd2\053\uffd2\060\uffd2\063\uffd2\111\uffd2\001\002" +
    "\000\014\050\044\053\056\060\054\063\045\111\053\001" +
    "\002\000\016\050\044\052\uffd1\053\056\060\054\063\045" +
    "\111\053\001\002\000\004\052\212\001\002\000\004\100" +
    "\213\001\002\000\024\050\uffd0\052\uffd0\053\uffd0\055\uffd0" +
    "\056\uffd0\060\uffd0\063\uffd0\101\uffd0\111\uffd0\001\002\000" +
    "\004\111\215\001\002\000\004\102\216\001\002\000\014" +
    "\050\uffad\053\uffad\060\uffad\063\uffad\111\uffad\001\002\000" +
    "\004\101\uffe0\001\002\000\006\071\214\103\222\001\002" +
    "\000\004\101\uffdf\001\002\000\004\067\223\001\002\000" +
    "\004\102\224\001\002\000\004\101\uffae\001\002\000\004" +
    "\070\313\001\002\000\004\101\ufffc\001\002\000\006\061" +
    "\uffc4\062\uffc4\001\002\000\006\061\231\062\234\001\002" +
    "\000\004\111\275\001\002\000\010\061\231\062\234\101" +
    "\267\001\002\000\010\061\uffbf\062\uffbf\101\uffbf\001\002" +
    "\000\004\111\237\001\002\000\010\061\uffc1\062\uffc1\101" +
    "\uffc1\001\002\000\010\061\uffc0\062\uffc0\101\uffc0\001\002" +
    "\000\004\076\240\001\002\000\006\072\242\074\243\001" +
    "\002\000\004\105\266\001\002\000\006\104\253\110\254" +
    "\001\002\000\004\072\242\001\002\000\006\075\uffb9\106" +
    "\uffb9\001\002\000\006\075\247\106\246\001\002\000\004" +
    "\072\242\001\002\000\004\105\250\001\002\000\010\061" +
    "\uffbb\062\uffbb\101\uffbb\001\002\000\006\075\uffba\106\uffba" +
    "\001\002\000\004\106\255\001\002\000\006\073\uffb6\106" +
    "\uffb6\001\002\000\006\073\uffb7\106\uffb7\001\002\000\006" +
    "\104\253\110\254\001\002\000\004\106\257\001\002\000" +
    "\006\104\253\110\254\001\002\000\004\106\261\001\002" +
    "\000\006\104\253\110\254\001\002\000\004\106\263\001" +
    "\002\000\006\104\253\110\254\001\002\000\004\073\265" +
    "\001\002\000\010\075\uffb8\105\uffb8\106\uffb8\001\002\000" +
    "\010\061\uffbc\062\uffbc\101\uffbc\001\002\000\004\103\272" +
    "\001\002\000\004\101\uffc3\001\002\000\010\061\uffc2\062" +
    "\uffc2\101\uffc2\001\002\000\004\070\273\001\002\000\004" +
    "\102\274\001\002\000\004\101\uffaa\001\002\000\004\076" +
    "\276\001\002\000\006\074\300\111\277\001\002\000\004" +
    "\105\312\001\002\000\006\003\302\111\303\001\002\000" +
    "\006\075\307\106\306\001\002\000\004\106\305\001\002" +
    "\000\012\003\304\075\uffe5\105\uffe5\106\uffe5\001\002\000" +
    "\010\075\uffe3\105\uffe3\106\uffe3\001\002\000\010\075\uffe2" +
    "\105\uffe2\106\uffe2\001\002\000\004\111\311\001\002\000" +
    "\004\105\310\001\002\000\010\061\uffbd\062\uffbd\101\uffbd" +
    "\001\002\000\010\075\uffe4\105\uffe4\106\uffe4\001\002\000" +
    "\010\061\uffbe\062\uffbe\101\uffbe\001\002\000\004\102\314" +
    "\001\002\000\006\061\uffab\062\uffab\001\002\000\004\103" +
    "\317\001\002\000\004\002\ufffd\001\002\000\004\064\320" +
    "\001\002\000\004\102\321\001\002\000\004\002\uffb4\001" +
    "\002\000\004\102\323\001\002\000\014\012\uffb1\013\uffb1" +
    "\014\uffb1\015\uffb1\016\uffb1\001\002\000\020\004\200\005" +
    "\165\006\163\007\201\010\152\011\175\057\334\001\002" +
    "\000\022\004\200\005\165\006\163\007\201\010\152\011" +
    "\175\057\334\101\354\001\002\000\022\004\ufff6\005\ufff6" +
    "\006\ufff6\007\ufff6\010\ufff6\011\ufff6\057\ufff6\101\ufff6\001" +
    "\002\000\006\003\346\111\347\001\002\000\022\004\ufff3" +
    "\005\ufff3\006\ufff3\007\ufff3\010\ufff3\011\ufff3\057\ufff3\101" +
    "\ufff3\001\002\000\022\004\ufff5\005\ufff5\006\ufff5\007\ufff5" +
    "\010\ufff5\011\ufff5\057\ufff5\101\ufff5\001\002\000\022\004" +
    "\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4\057\ufff4" +
    "\101\ufff4\001\002\000\006\003\302\111\303\001\002\000" +
    "\004\111\335\001\002\000\004\076\336\001\002\000\004" +
    "\074\337\001\002\000\006\003\302\111\303\001\002\000" +
    "\006\075\341\106\306\001\002\000\004\105\342\001\002" +
    "\000\022\004\uffec\005\uffec\006\uffec\007\uffec\010\uffec\011" +
    "\uffec\057\uffec\101\uffec\001\002\000\006\105\344\106\306" +
    "\001\002\000\022\004\uffef\005\uffef\006\uffef\007\uffef\010" +
    "\uffef\011\uffef\057\uffef\101\uffef\001\002\000\006\105\351" +
    "\106\306\001\002\000\024\004\ufff0\005\ufff0\006\ufff0\007" +
    "\ufff0\010\ufff0\011\ufff0\057\ufff0\101\ufff0\106\305\001\002" +
    "\000\010\003\350\105\uffe5\106\uffe5\001\002\000\026\004" +
    "\ufff1\005\ufff1\006\ufff1\007\ufff1\010\ufff1\011\ufff1\057\ufff1" +
    "\101\ufff1\105\uffe3\106\uffe3\001\002\000\022\004\ufff2\005" +
    "\ufff2\006\ufff2\007\ufff2\010\ufff2\011\ufff2\057\ufff2\101\ufff2" +
    "\001\002\000\022\004\ufff7\005\ufff7\006\ufff7\007\ufff7\010" +
    "\ufff7\011\ufff7\057\ufff7\101\ufff7\001\002\000\004\101\ufff8" +
    "\001\002\000\004\103\355\001\002\000\004\065\356\001" +
    "\002\000\004\102\357\001\002\000\004\101\uffb2\001\002" +
    "\000\014\012\155\013\171\014\167\015\166\016\161\001" +
    "\002\000\006\003\302\111\303\001\002\000\016\012\uffe8" +
    "\013\uffe8\014\uffe8\015\uffe8\016\uffe8\101\uffe8\001\002\000" +
    "\016\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7\101\uffe7" +
    "\001\002\000\016\012\155\013\171\014\167\015\166\016" +
    "\161\101\367\001\002\000\004\101\uffea\001\002\000\016" +
    "\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\101\uffe9\001" +
    "\002\000\004\103\370\001\002\000\004\066\371\001\002" +
    "\000\004\102\372\001\002\000\004\101\uffb0\001\002\000" +
    "\006\105\374\106\306\001\002\000\016\012\uffe6\013\uffe6" +
    "\014\uffe6\015\uffe6\016\uffe6\101\uffe6\001\002\000\004\066" +
    "\322\001\002\000\004\101\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\374\000\010\003\006\004\005\005\003\001\001\000" +
    "\004\073\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\007\017\010\020\013\013\014\021" +
    "\015\015\017\014\001\001\000\006\014\375\017\014\001" +
    "\001\000\004\076\357\001\001\000\004\074\323\001\001" +
    "\000\002\001\001\000\004\006\315\001\001\000\006\011" +
    "\026\021\027\001\001\000\006\013\022\015\015\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\225\025\226\001\001\000\004" +
    "\077\033\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\023\034\024\036\055\037\001\001" +
    "\000\010\022\216\024\220\055\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\100\040\001\001\000\022" +
    "\036\045\037\046\040\042\041\051\042\050\047\041\050" +
    "\047\054\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\037\066\040" +
    "\042\041\051\042\050\047\041\050\047\054\054\056\133" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\103\057\001" +
    "\001\000\004\043\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\104\064\001\001\000" +
    "\022\036\065\037\046\040\042\041\051\042\050\047\041" +
    "\050\047\054\054\001\001\000\022\037\066\040\042\041" +
    "\051\042\050\047\041\050\047\054\054\105\067\001\001" +
    "\000\002\001\001\000\004\053\071\001\001\000\004\106" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\036\075\037\046\040\042\041\051\042" +
    "\050\047\041\050\047\054\054\001\001\000\022\037\066" +
    "\040\042\041\051\042\050\047\041\050\047\054\054\107" +
    "\076\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\064" +
    "\111\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\062\125\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\057\152\060\156" +
    "\061\146\063\150\065\175\066\171\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\060\202\001\001\000\004\075\203\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\101\206\001" +
    "\001\000\022\036\207\037\046\040\042\041\051\042\050" +
    "\047\041\050\047\054\054\001\001\000\022\037\066\040" +
    "\042\041\051\042\050\047\041\050\047\054\054\102\210" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\110\227\001\001\000" +
    "\012\034\231\035\234\051\235\052\232\001\001\000\002" +
    "\001\001\000\012\026\267\035\270\051\235\052\232\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\070\240\001" +
    "\001\000\002\001\001\000\004\072\251\001\001\000\006" +
    "\070\243\071\244\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\070\250\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\072\255\001\001\000\002" +
    "\001\001\000\004\072\257\001\001\000\002\001\001\000" +
    "\004\072\261\001\001\000\002\001\001\000\004\072\263" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\067\300\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\027\324\030\325\044\330\045\331\046" +
    "\327\057\326\065\332\001\001\000\020\016\352\030\351" +
    "\044\330\045\331\046\327\057\326\065\332\001\001\000" +
    "\002\001\001\000\004\067\344\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\067\342\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\067\337\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\031\363\032\361\033\362" +
    "\061\360\001\001\000\004\067\372\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\020\364\032\365\033\362" +
    "\061\360\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public static void main(String args[]) throws Exception {
		new parser(new Yylex(System.in)).parse();
	}
	
	public void syntax_error(Symbol cur_token) { 
		// n'interrompt pas la compil... 
		// on est par defaut dans l'etat error qui permet ensuite la recup
		// par défaut : report_error("syntax error", null);
		report_error("Syntaxe incorrecte <" + tokenToString(cur_token) + ">", null);        
	}

	public void report_error(String message, Object info) {   
		// n'interrompt pas la compil
		if(info == null) System.err.println("Mon erreur <" + ptext() + "> ligne " + pline() + ", colonne " + pcolumn() + " : " + message);
		else System.err.println("Mon erreur <" + ptext() + "> ligne " + pline() + ", colonne " + pcolumn() + " : " + message + " : " + info);
	}

	public void unrecovered_syntax_error(Symbol cur_token) {
    	// par defaut : report_fatal_error("Couldn't repair and continue parse", null);
		// on n'a pas reussi a faire de la recup
		report_fatal_error("Recuperation impossible <" + tokenToString(cur_token) + ">", null);   // interrompt la compil     
	}

	public void report_fatal_error(String message, Object info) {  
		// qd cette fct est appelee, message vaut par defaut "Couldn't repair and continue parse"
		String m = "Mon erreur fatale <" + ptext() + "> ligne " + pline() + ", colonne " + pcolumn() + " : " + message;
		if(info == null) System.err.println(m);
		else System.err.println(m + " : " + info);
		System.err.println("-> arrêt de l'analyse...");
		done_parsing(); // interrompt la compil
  	}

	public int pline(){
		return ((Yylex)getScanner()).getYyLine();
	}
	public int pcolumn(){
		return ((Yylex)getScanner()).getYyColumn();
	}
	public String ptext(){
		return ((Yylex)getScanner()).getYyText();
	}
	
	public String tokenToString (Symbol token) {
        // qqs exemples pour voir...
        return "Token : " + token.value;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


    class Date {
        private int annee;
        private int mois;
        private int jour;
        private int heure;
        private int minute;
        
        public Date(int annee, int mois, int jour, int heure, int minute) {
            this.annee  = annee;
            this.mois   = mois;
            this.jour   = jour;
            this.heure  = heure;
            this.minute = minute;
        }
        
        public int getAnnee()   { return this.annee; }
        public int getMois()    { return this.mois; }
        public int getJour()    { return this.jour; }
        public int getHeure()   { return this.heure; }
        public int getMinute()  { return this.minute; }
        
        @Override
        public String toString() {
            return  this.annee +
                    "/" + this.mois + 
                    "/" + this.jour + 
                    " " + this.heure +
                    ":" + this.minute;
        }
    }
    
    class ProgramData {
        private HashMap<String, ArrayList<String>> identScenario;
        private HashMap<String, ArrayList<String>> definirGroupe;
        private HashMap<String, ArrayList<String>> temporalyIdent;
        private HashMap<String, ArrayList<String>> identAppareil;
        private HashMap<String, ArrayList<String>> identInterface;
        private HashMap<String, ArrayList<String>> actionsAppareil;
        private HashMap<String, ArrayList<String>> etatsAppareils;
        private HashMap<String, ArrayList<Date>> programmationScenario;
        private HashMap<String, ArrayList<String>> associationScenario;
        
        public ProgramData() {
            this.identScenario          = new HashMap<String, ArrayList<String>>();
            this.definirGroupe          = new HashMap<String, ArrayList<String>>();
            this.temporalyIdent         = new HashMap<String, ArrayList<String>>();
            this.identAppareil          = new HashMap<String, ArrayList<String>>();
            this.identInterface         = new HashMap<String, ArrayList<String>>();
            this.actionsAppareil        = new HashMap<String, ArrayList<String>>();
            this.etatsAppareils         = new HashMap<String, ArrayList<String>>();
            this.programmationScenario  = new HashMap<String, ArrayList<Date>>();
            this.associationScenario    = new HashMap<String, ArrayList<String>>();
            
            
            ArrayList<String> actionEclairage       = new ArrayList<String>();
            ArrayList<String> actionAlarme          = new ArrayList<String>();
            ArrayList<String> actionChauffage       = new ArrayList<String>();
            ArrayList<String> actionFenetre         = new ArrayList<String>();
            ArrayList<String> actionVolet           = new ArrayList<String>();
            ArrayList<String> actionAutreAppareil   = new ArrayList<String>();
            
            actionEclairage.add("etat");
            actionEclairage.add("allumer");
            actionEclairage.add("eteindre");
            actionEclairage.add("tamiser");
            
            actionAlarme.add("etat");
            actionAlarme.add("allumer");
            actionAlarme.add("allumer_partiel");
            actionAlarme.add("eteindre");
            
            actionChauffage.add("etat");
            actionChauffage.add("allumer");
            actionChauffage.add("allumer_eco");
            actionChauffage.add("eteindre");
            
            actionFenetre.add("etat");
            actionFenetre.add("ouvrir");
            actionFenetre.add("ouvrir_partiel");
            actionFenetre.add("fermer");
            actionFenetre.add("fermer_partiel");
            
            actionVolet.add("etat");
            actionVolet.add("ouvrir");
            actionVolet.add("ouvrir_partiel");
            actionVolet.add("fermer");
            actionVolet.add("fermer_partiel");
            
            actionAutreAppareil.add("etat");
            actionAutreAppareil.add("allumer");
            actionAutreAppareil.add("eteindre");
            
            this.actionsAppareil.put("eclairage", actionEclairage);
            this.actionsAppareil.put("alarme", actionAlarme);
            this.actionsAppareil.put("chauffage", actionChauffage);
            this.actionsAppareil.put("fenetre", actionFenetre);
            this.actionsAppareil.put("volet", actionVolet);
            this.actionsAppareil.put("autre_appareil", actionAutreAppareil);
        }
        
        public HashMap<String, ArrayList<String>> getIdentScenario() { return this.identScenario; }
        public HashMap<String, ArrayList<String>> getIdentAppareil() { return this.identAppareil; }
        public HashMap<String, ArrayList<String>> getIdentInterface() { return this.identInterface; }
        public HashMap<String, ArrayList<Date>> getProgrammationScenario() { return this.programmationScenario; }
        public HashMap<String, ArrayList<String>> getAssociationScenario() { return this.associationScenario; }
        
        public void addIdentAppareil(String type, String ident) {
            if(!this.identAppareil.containsKey(type)) {
                this.identAppareil.put(type, new ArrayList<String>());
                this.identAppareil.get(type).add(ident);
            } else
                this.identAppareil.get(type).add(ident);
         }
         
        public void addDefinirGroupe(String type, String ident) {
            if(!this.definirGroupe.containsKey(type)) {
                this.definirGroupe.put(type, new ArrayList<String>());
                this.definirGroupe.get(type).add(ident);
            } else
                this.definirGroupe.get(type).add(ident);
         }
         
        
        public void addIdentInterface(String type, String ident) {
            if(!this.identInterface.containsKey(type)) {
                this.identInterface.put(type, new ArrayList<String>());
                this.identInterface.get(type).add(ident);
            } else
                this.identInterface.get(type).add(ident);
        }
        
        public void addScenarioContent(String content) {
            if(!this.identScenario.containsKey(currentScenario))
                this.identScenario.put(currentScenario, new ArrayList<String>());
            
            this.identScenario.get(currentScenario).add(content);
        }
        
        public void addTemporalyIdent(String type, String ident) {
            if(!this.temporalyIdent.containsKey(type)) {
                this.temporalyIdent.put(type, new ArrayList<String>());
                this.temporalyIdent.get(type).add(ident);
            } else
                this.temporalyIdent.get(type).add(ident);
        }
        
        public void removeTemporalyIdent(String ident) {
            Collection<ArrayList<String>> values = this.temporalyIdent.values();
            Iterator<ArrayList<String>> itr = values.iterator();
            while(itr.hasNext()) {
                ArrayList<String> list = itr.next();
                
                Iterator<String> subItr = list.iterator();
                if(list.contains(ident)) {
                    list.remove(ident);
                    return;
                }
            }
        }
        
        public void addScenarioDate(String ident, Date date) {
            if(!this.programmationScenario.containsKey(ident)) {
                this.programmationScenario.put(ident, new ArrayList<Date>());
                this.programmationScenario.get(ident).add(date);
            } else
                this.programmationScenario.get(ident).add(date);
        }
        
        public void addAssociationScenario(String ident, String scenario) {
            if(!this.associationScenario.containsKey(ident)) {
                this.associationScenario.put(ident, new ArrayList<String>());
                this.associationScenario.get(ident).add(scenario);
            } else
                this.associationScenario.get(ident).add(scenario);
        }
        
        public boolean hasIdentAppareil(String ident) {
            Collection<ArrayList<String>> values = this.identAppareil.values();
            Iterator<ArrayList<String>> itr = values.iterator();
            while(itr.hasNext()) {
                ArrayList<String> list = itr.next();
                
                Iterator<String> subItr = list.iterator();
                while(subItr.hasNext())
                    if(subItr.next().equals(ident))
                        return true;
            }
            return false;
        }
        
        public boolean hasDefinirGroupe(String ident) {
            Collection<ArrayList<String>> values = this.definirGroupe.values();
            Iterator<ArrayList<String>> itr = values.iterator();
            while(itr.hasNext()) {
                ArrayList<String> list = itr.next();
                
                Iterator<String> subItr = list.iterator();
                while(subItr.hasNext())
                    if(subItr.next().equals(ident))
                        return true;
            }
            return false;
        }
        
        public boolean hasTemporalyIdent(String ident) {
            Collection<ArrayList<String>> values = this.temporalyIdent.values();
            Iterator<ArrayList<String>> itr = values.iterator();
            while(itr.hasNext()) {
                ArrayList<String> list = itr.next();
                
                Iterator<String> subItr = list.iterator();
                while(subItr.hasNext())
                    if(subItr.next().equals(ident))
                        return true;
            }
            return false;
        }
        
        
        public boolean hasIdentInterface(String ident) {
            Collection<ArrayList<String>> values = this.identInterface.values();
            Iterator<ArrayList<String>> itr = values.iterator();
            while(itr.hasNext()) {
                ArrayList<String> list = itr.next();
                
                Iterator<String> subItr = list.iterator();
                while(subItr.hasNext())
                    if(subItr.next().equals(ident))
                        return true;
            }
            return false;
        }
        
        public boolean hasIdentScenario(String ident) { return this.identScenario.containsKey(ident); }
        
        public boolean hasActionsAppareil(String appareil, String action) {
            if(!this.actionsAppareil.containsKey(appareil))
                return false;
                
            return this.actionsAppareil.get(appareil).contains(action);
        }
        
        public boolean hasEtatsAppareils(String appareil, String etat) {
            if(!this.actionsAppareil.containsKey(appareil))
                return false;
                
            return this.actionsAppareil.get(appareil).contains(etat);
        }
        
        public boolean hasAction(String ident, String action) {
            if(!this.actionsAppareil.containsKey(ident))
                return false;
            return this.actionsAppareil.get(ident).contains(action);
        }
        
        public String getType(String ident) {
            for(String key : this.identAppareil.keySet())
                if(this.identAppareil.get(key).contains(ident))
                    return key;
                    
            for(String key : this.definirGroupe.keySet())
                if(this.definirGroupe.get(key).contains(ident))
                    return key;
                    
             for(String key : this.temporalyIdent.keySet())
                if(this.temporalyIdent.get(key).contains(ident))
                    return key;
                    
            return null;                
        }
    }
    
    
    public void addIdentAppareil(String type, ArrayList<String> l) {
        Iterator<String> itr = l.iterator();
        while(itr.hasNext()) {
            String ident = itr.next();
            if(!data.hasIdentAppareil(ident))
                data.addIdentAppareil(type, ident);
            else
                System.out.println("Erreur. L'identifiant d'apapreil \"" + ident + "\" existe déjà.");
            
        }
    }
    
    public void addDefinirGroupe(String type, ArrayList<String> l) {
        Iterator<String> itr = l.iterator();
        while(itr.hasNext()) {
            String ident = itr.next();
            if(!data.hasDefinirGroupe(ident))
                data.addDefinirGroupe(type, ident);
            else
                System.out.println("Erreur. L'identifiant du groupe \"" + ident + "\" existe déjà.");
            
        }
    }
    
    public void addIdentInterface(String type, ArrayList<String> l) {
        Iterator<String> itr = l.iterator();
        while(itr.hasNext()) {
            String ident = itr.next();
            if(!data.hasIdentInterface(ident))
                data.addIdentInterface(type, ident);
            else
                System.out.println("Erreur. L'identifiant d'interface \"" + ident + "\" existe déjà.");
            
        }
    }
    
    public void addScenarioDate(String ident, ArrayList<Date> dates) {
        if(!data.hasIdentScenario(ident)) {
            System.out.println("Erreur. Le scenario \"" + ident + "\" n'existe pas.");
            return;
        }
        
        Iterator<Date> itr = dates.iterator();
        while(itr.hasNext())
            data.addScenarioDate(ident, itr.next());
    }
    
    public void addAssociationScenario(String ident, ArrayList<String> scenarii) {
        if(!data.hasIdentInterface(ident)) {
            System.out.println("Erreur. L'interface \"" + ident + "\" n'existe pas, association impossible.");
            return;
        }
        
        Iterator<String> itr = scenarii.iterator();
        while(itr.hasNext())
            data.addAssociationScenario(ident, itr.next());
    }
    
    
    //============================================================//
    //============================================================//
    public void generateFiles() {
        System.out.println("Génération des fichiers java...");
        this.generateCMaisonUser();
        this.generateHabitatSpecific();
    }
    
    private void generateCMaisonUser() {
        try {
            String fileName = "CMaisonUser.java";
            
            System.out.println("Génération du fichier \"" + fileName + "\".");
            
            File file = new File(fileName);
            
            if(file.exists()) {
                System.out.println("\tLe fichier \"" + fileName + "\" existe déjà.");
                System.out.print("\tSuppression du fichier Java...");
                if(file.delete())
                    System.out.println("OK.");
                else {
                    System.out.println("Echec.");
                    return;
                }
            } else {
                System.out.println("\tLe fichier \"" + fileName + "\" n'existe pas.");
                System.out.print("\tCréation du fichier...");
                if(file.createNewFile())
                    System.out.println("OK.");
                else {
                    System.out.println("Echec.");
                    return;
                }
            }
            
            System.out.println("Ecriture des données...");            
            
            FileWriter fw = new FileWriter(file.getAbsoluteFile(), true);
            BufferedWriter bw = new BufferedWriter(fw);
            
            bw.write("//" + fileName + "\n\n");
            bw.write("public class CMaisonUser extends CMaison {\n");
            bw.write("    public CMaisonUser() {\n");
            bw.write("        super();\n\n");
            
            //Ajout des appareils
            HashMap<String, ArrayList<String>> identAppareil = data.getIdentAppareil();
            bw.write("        //Appareils\n");       
            for(String key : identAppareil.keySet()) {
                ArrayList<String> list = identAppareil.get(key);
                
                String typeAppareil = "";
                if(key.equals("volet"))
                    typeAppareil = "CVoletFenetre";
                else
                    typeAppareil = "C" + key.substring(0, 1).toUpperCase() + key.substring(1);
                
                Iterator<String> subItr = list.iterator();
                while(subItr.hasNext()) {
                    String ident = subItr.next();
                    bw.write( "        " + typeAppareil + " " + ident + " = new " + typeAppareil + "(\"" + ident + "\", TypeAppareil." + key.toUpperCase() + ");\n");
                    bw.write("        ma_liste_appareils.add(" + ident + ");\n");
                }
            }
            
            
            //Ajout des interfaces
            HashMap<String, ArrayList<String>> identInterface = data.getIdentInterface();
            bw.write("\n        //Interfaces\n");       
            for(String key : identInterface.keySet()) {
                ArrayList<String> list = identInterface.get(key);
                
                String typeInterface = "CInterface";
                
                Iterator<String> subItr = list.iterator();
                while(subItr.hasNext()) {
                    String ident = subItr.next();
                    bw.write( "        " + typeInterface + " " + ident + " = new " + typeInterface + "(\"" + ident + "\", TypeInterface." + key.toUpperCase() + ");\n");
                    bw.write("        ma_liste_interfaces.add(" + ident + ");\n");
                }
            }
            
            //Ajout des scenarii
            HashMap<String, ArrayList<String>> scenarii = data.getIdentScenario();
            bw.write("\n        //Scenarii\n"); 
            
            for(String key : scenarii.keySet()) {
                ArrayList<String> list = scenarii.get(key);
                
                String typeScenario = "CScenario";
                
                Iterator<String> subItr = list.iterator();
                
                String scenarioContents = "";
                while(subItr.hasNext()) {
                    String content = subItr.next();
                    scenarioContents += "\"" + content.replaceAll("\"", "\\\\\"") + "\\n\" + " + "\n";
                } 
                scenarioContents += "\"\";";
                bw.write("    String " + key + "_contenu = " + scenarioContents + "\n");  
                bw.write("    " + typeScenario + " " + key + " = new " + typeScenario + "(\"" + key + "\", " + key + "_contenu);\n");
                bw.write("    ma_liste_scenarios.add(" + key + ");\n");
            }
            
            
            //Ajout des programmations
            HashMap<String, ArrayList<Date>> programmations = data.getProgrammationScenario();
            bw.write("\n        //Programmations\n");       
            int idProg = 1;
            for(String key : programmations.keySet()) {
                ArrayList<Date> list = programmations.get(key);
                
                String typeProgrammation = "CProgrammation";
                String identProg = "p" + idProg;
                
                bw.write( "        " + typeProgrammation + " " + identProg + " = new " + typeProgrammation + "(\"" + key + "\");\n");                
                
                Iterator<Date> subItr = list.iterator();
                int idDate = 1;
                while(subItr.hasNext()) {
                    String typeDate = "CDate";
                    Date date = subItr.next();
                    String identDate = identProg + "d" + idDate;
                    idDate++;
                    
                    bw.write(   "        "
                                + typeDate + " "
                                + identDate + " = new "
                                + typeDate + "("
                                + date.getAnnee()+ ", "
                                + date.getMois() + ", "
                                + date.getJour() + ", "
                                + date.getHeure() + ", "
                                + date.getMinute()
                                + ");\n");
                                
                    bw.write("        " + identProg + ".addDate(" + identDate + ");\n");
                }
                bw.write("        ma_liste_programmations.add(" + identProg + ");\n\n");
                idProg++;
            }
            
            
            //Ajout des associations
            HashMap<String, ArrayList<String>> associations = data.getAssociationScenario();
            bw.write("        //Associations\n");       
            for(String key : associations.keySet()) {
                ArrayList<String> list = associations.get(key);
                
                Iterator<String> subItr = list.iterator();
                while(subItr.hasNext())
                    bw.write("        " + key + ".addScenarioAssocie(\"" + subItr.next()  + "\");\n");
            }
             
            
            //Finalisation du fichier
            bw.write("\n        //Finalisation\n");
            bw.write("        monHabitat = new HabitatSpecific(ma_liste_appareils, ma_liste_ens_appareils, ma_liste_scenarios, ma_liste_interfaces, ma_liste_programmations);\n");
             
             
            bw.write("    }\n");
            bw.write("}");
            
            bw.close();
            System.out.println("Enregistrement des données terminé.\n");
        } catch(IOException e) {
           System.out.println("Erreur. " + e.getMessage());
        }
    }
    
    private void generateHabitatSpecific() {
        try {
            String fileName = "HabitatSpecific.java";
            
            System.out.println("Génération du fichier \"" + fileName + "\".");
            
            File file = new File(fileName);
            
            if(file.exists()) {
                System.out.println("\tLe fichier \"" + fileName + "\" existe déjà.");
                System.out.print("\tSuppression du fichier Java...");
                if(file.delete())
                    System.out.println("OK.");
                else {
                    System.out.println("Echec.");
                    return;
                }
            } else {
                System.out.println("\tLe fichier \"" + fileName + "\" n'existe pas.");
                System.out.print("\tCréation du fichier...");
                if(file.createNewFile())
                    System.out.println("OK.");
                else {
                    System.out.println("Echec.");
                    return;
                }
            }
            
            System.out.println("Ecriture des données...");
             
            FileWriter fw = new FileWriter(file.getAbsoluteFile(), true);
            BufferedWriter bw = new BufferedWriter(fw);
            
            bw.write("//" + fileName + "\n\n");
            bw.write("import java.util.ArrayList;\n\n");
            bw.write("public class HabitatSpecific extends Habitat {\n");
            bw.write("    public HabitatSpecific(  ArrayList<CAppareil> lapp,\n");
            bw.write("                             ArrayList<CEnsAppareil> lens,\n");
            bw.write("                             ArrayList<CScenario> lscen,\n");
            bw.write("                             ArrayList<CInterface> lint,\n");
            bw.write("                             ArrayList<CProgrammation> lprog) {\n");
            
            bw.write("        super(lapp,lens,lscen,lint,lprog);\n");
            bw.write("    }\n\n");
                                               
            
            bw.write("    public void execScenarioNum(int num) {\n");
            bw.write("        System.out.println(\"Execution du scenario \"+ this.l_scenarios.get(num).getNomScenario() + \"...\");\n\n");
            
            bw.write("\n        //Scenarii\n");
            bw.write("        switch(num) {\n");
            
             
            HashMap<String, ArrayList<String>> identScenario = data.getIdentScenario();
            int index = 0;
            for(String key : identScenario.keySet()) {
                ArrayList<String> list = identScenario.get(key);
                
                bw.write("        case " + index + ": //Scenario " + key + "\n");
                
                Iterator<String> subItr = list.iterator();
                while(subItr.hasNext()) {
                    bw.write("            " + subItr.next() + "\n");
                }
                bw.write("            break;\n");
                index++;
            }
            
           
            bw.write("        }\n");
            
            
            bw.write("    }\n");
            bw.write("}");
            
            bw.close();
            System.out.println("Enregistrement des données terminé.");
        } catch(IOException e) {
           System.out.println("Erreur. " + e.getMessage());
        }
    }
    //============================================================//
    //============================================================//
    
    
    
    ProgramData data = new ProgramData();
    String currentScenario = "";

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // etatAppareil ::= FERME 
            {
              String RESULT = null;
		 RESULT = "ferme"; 
              CUP$parser$result = new java_cup.runtime.Symbol(50/*etatAppareil*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // etatAppareil ::= OUVERT 
            {
              String RESULT = null;
		 RESULT = "ouvert"; 
              CUP$parser$result = new java_cup.runtime.Symbol(50/*etatAppareil*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // etatAppareil ::= ECO 
            {
              String RESULT = null;
		 RESULT = "eco"; 
              CUP$parser$result = new java_cup.runtime.Symbol(50/*etatAppareil*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // etatAppareil ::= DEMI 
            {
              String RESULT = null;
		 RESULT = "demi"; 
              CUP$parser$result = new java_cup.runtime.Symbol(50/*etatAppareil*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // etatAppareil ::= ETEINT 
            {
              String RESULT = null;
		 RESULT = "eteint"; 
              CUP$parser$result = new java_cup.runtime.Symbol(50/*etatAppareil*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // etatAppareil ::= ALLUME 
            {
              String RESULT = null;
		 RESULT = "allume"; 
              CUP$parser$result = new java_cup.runtime.Symbol(50/*etatAppareil*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // listAction ::= FERMER_PARTIEL 
            {
              String RESULT = null;
		 RESULT = "fermer_partiel"; 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*listAction*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // listAction ::= OUVRIR_PARTIEL 
            {
              String RESULT = null;
		 RESULT = "ouvrir_partiel"; 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*listAction*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // listAction ::= ALLUMER_ECO 
            {
              String RESULT = null;
		 RESULT = "allumer_eco"; 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*listAction*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // listAction ::= ALLUMER_PARTIEL 
            {
              String RESULT = null;
		 RESULT = "allumer_partiel"; 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*listAction*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // listAction ::= ETAT 
            {
              String RESULT = null;
		 RESULT = "etat"; 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*listAction*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // listAction ::= TAMISER 
            {
              String RESULT = null;
		 RESULT = "tamiser"; 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*listAction*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // listAction ::= ALLUMER 
            {
              String RESULT = null;
		 RESULT = "allumer"; 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*listAction*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // listAction ::= ETEINDRE 
            {
              String RESULT = null;
		 RESULT = "eteindre"; 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*listAction*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // listAction ::= FERMER 
            {
              String RESULT = null;
		 RESULT = "fermer"; 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*listAction*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // listAction ::= OUVRIR 
            {
              String RESULT = null;
		 RESULT = "ouvrir"; 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*listAction*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // autreAppareil ::= ORDINATEUR 
            {
              String RESULT = null;
		 RESULT = "ordinateur"; 
              CUP$parser$result = new java_cup.runtime.Symbol(46/*autreAppareil*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // autreAppareil ::= PORTAIL 
            {
              String RESULT = null;
		 RESULT = "portail"; 
              CUP$parser$result = new java_cup.runtime.Symbol(46/*autreAppareil*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // autreAppareil ::= SECHE_LINGE 
            {
              String RESULT = null;
		 RESULT = "seche_linge"; 
              CUP$parser$result = new java_cup.runtime.Symbol(46/*autreAppareil*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // autreAppareil ::= LAVE_LINGE 
            {
              String RESULT = null;
		 RESULT = "lave_linge"; 
              CUP$parser$result = new java_cup.runtime.Symbol(46/*autreAppareil*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // autreAppareil ::= LAVE_VAISSELLE 
            {
              String RESULT = null;
		 RESULT = "lave_vaisselle"; 
              CUP$parser$result = new java_cup.runtime.Symbol(46/*autreAppareil*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // autreAppareil ::= VIDEO_PROJ 
            {
              String RESULT = null;
		 RESULT = "video_proj"; 
              CUP$parser$result = new java_cup.runtime.Symbol(46/*autreAppareil*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // autreAppareil ::= CAFETIERE 
            {
              String RESULT = null;
		 RESULT = "cafetiere"; 
              CUP$parser$result = new java_cup.runtime.Symbol(46/*autreAppareil*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // autreAppareil ::= HIFI 
            {
              String RESULT = null;
		 RESULT = "hifi"; 
              CUP$parser$result = new java_cup.runtime.Symbol(46/*autreAppareil*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // autreAppareil ::= TV 
            {
              String RESULT = null;
		 RESULT = "tv"; 
              CUP$parser$result = new java_cup.runtime.Symbol(46/*autreAppareil*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // interface ::= TABLETTE 
            {
              String RESULT = null;
		 RESULT = "tablette"; 
              CUP$parser$result = new java_cup.runtime.Symbol(47/*interface*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // interface ::= TELECOMMANDE 
            {
              String RESULT = null;
		 RESULT = "telecommande"; 
              CUP$parser$result = new java_cup.runtime.Symbol(47/*interface*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // interface ::= TELEPHONE 
            {
              String RESULT = null;
		 RESULT = "telephone"; 
              CUP$parser$result = new java_cup.runtime.Symbol(47/*interface*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // interface ::= MOBILE 
            {
              String RESULT = null;
		 RESULT = "mobile"; 
              CUP$parser$result = new java_cup.runtime.Symbol(47/*interface*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // interface ::= INTERRUPTEUR 
            {
              String RESULT = null;
		 RESULT = "interrupteur"; 
              CUP$parser$result = new java_cup.runtime.Symbol(47/*interface*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // appareil ::= FENETRE 
            {
              String RESULT = null;
		 RESULT = "fenetre"; 
              CUP$parser$result = new java_cup.runtime.Symbol(45/*appareil*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // appareil ::= ALARME 
            {
              String RESULT = null;
		 RESULT = "alarme"; 
              CUP$parser$result = new java_cup.runtime.Symbol(45/*appareil*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // appareil ::= CHAUFFAGE 
            {
              String RESULT = null;
		 RESULT = "chauffage"; 
              CUP$parser$result = new java_cup.runtime.Symbol(45/*appareil*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // appareil ::= VOLET 
            {
              String RESULT = null;
		 RESULT = "volet"; 
              CUP$parser$result = new java_cup.runtime.Symbol(45/*appareil*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // appareil ::= ECLAIRAGE 
            {
              String RESULT = null;
		 RESULT = "eclairage"; 
              CUP$parser$result = new java_cup.runtime.Symbol(45/*appareil*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // element ::= IDENTIFIANT 
            {
              String RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = r; 
              CUP$parser$result = new java_cup.runtime.Symbol(49/*element*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // element ::= autreAppareil 
            {
              String RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = r; 
              CUP$parser$result = new java_cup.runtime.Symbol(49/*element*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // element ::= interface 
            {
              String RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = r; 
              CUP$parser$result = new java_cup.runtime.Symbol(49/*element*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // element ::= appareil 
            {
              String RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = r; 
              CUP$parser$result = new java_cup.runtime.Symbol(49/*element*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // identifiantDefintion ::= element 
            {
              String RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = r; 
              CUP$parser$result = new java_cup.runtime.Symbol(52/*identifiantDefintion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // identifiantDefintion ::= autreAppareilDefinition 
            {
              String RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = r; 
              CUP$parser$result = new java_cup.runtime.Symbol(52/*identifiantDefintion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // closeCommande ::= CHEVRON_GAUCHE SLASH DECLARATION_COMMANDES CHEVRON_DROIT 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(20/*closeCommande*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // openCommande ::= CHEVRON_GAUCHE DECLARATION_COMMANDES CHEVRON_DROIT 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(19/*openCommande*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // closeScenario ::= CHEVRON_GAUCHE SLASH SCENARIO IDENTIFIANT CHEVRON_DROIT 
            {
              String RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = id; 
              CUP$parser$result = new java_cup.runtime.Symbol(44/*closeScenario*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // openScenario ::= CHEVRON_GAUCHE SCENARIO IDENTIFIANT CHEVRON_DROIT 
            {
              String RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = id; 
              CUP$parser$result = new java_cup.runtime.Symbol(43/*openScenario*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // closeScenarii ::= CHEVRON_GAUCHE SLASH DECLARATION_SCENARII CHEVRON_DROIT 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(16/*closeScenarii*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // openScenarii ::= CHEVRON_GAUCHE DECLARATION_SCENARII CHEVRON_DROIT 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*openScenarii*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // closeInterfaces ::= CHEVRON_GAUCHE SLASH DECLARATION_INTERFACES CHEVRON_DROIT 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*closeInterfaces*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // openInterfaces ::= CHEVRON_GAUCHE DECLARATION_INTERFACES CHEVRON_DROIT 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*openInterfaces*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // closeAppareils ::= CHEVRON_GAUCHE SLASH DECLARATION_APPAREILS CHEVRON_DROIT 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*closeAppareils*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // openAppareils ::= CHEVRON_GAUCHE DECLARATION_APPAREILS CHEVRON_DROIT 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*openAppareils*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // closeDomus ::= CHEVRON_GAUCHE SLASH PROGRAMME_DOMUS CHEVRON_DROIT 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*closeDomus*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // openDomus ::= CHEVRON_GAUCHE PROGRAMME_DOMUS CHEVRON_DROIT 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*openDomus*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // subProgrammationContents ::= UNDERSCORE 
            {
              Integer RESULT = null;
		 RESULT = -1; 
              CUP$parser$result = new java_cup.runtime.Symbol(56/*subProgrammationContents*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // subProgrammationContents ::= ENTIER 
            {
              Integer RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(56/*subProgrammationContents*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // programmationContents ::= PAR_GAUCHE subProgrammationContents VIRGULE subProgrammationContents VIRGULE subProgrammationContents VIRGULE subProgrammationContents VIRGULE subProgrammationContents PAR_DROITE 
            {
              Date RESULT = null;
		int anneeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int anneeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Integer annee = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int moisleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int moisright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Integer mois = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int jourleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int jourright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Integer jour = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int heureleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int heureright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer heure = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int minuteleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int minuteright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer minute = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        Date date = new Date(-1, -1, -1, -1, -1);
        
        boolean errorDate = false;
        
        if(!(annee >= 1000 && annee <= 9999) && annee != -1) {
            System.out.println("Erreur. Format de l'année incorrect.");
            RESULT = date;
            errorDate = true;
        }
        
        if(!(mois >= 1 && mois <= 12) && mois != -1) {
            System.out.println("Erreur. Format du mois incorrect.");
            RESULT = date;
            errorDate = true;
        }
        
        if(!(jour >= 1 && jour <= 31) && jour != -1) {
            System.out.println("Erreur. Format du jour incorrect.");
            RESULT = date;
            errorDate = true;
        }
        
        if(!(heure >= 0 && heure <= 23) && heure != -1) {
            System.out.println("Erreur. Format de l'heure incorrect.");
            RESULT = date;
            errorDate = true;
        }
        
        if(!(minute >= 0 && minute <= 59) && minute != -1) {
            System.out.println("Erreur. Format de la minute incorrect.");
            RESULT = date;
            errorDate = true;
        }
        
        if(!errorDate) {
            date = new Date(annee, mois, jour, heure, minute);
            RESULT = date;
        }
    
              CUP$parser$result = new java_cup.runtime.Symbol(54/*programmationContents*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // multiProgrammationContents ::= programmationContents 
            {
              ArrayList<Date> RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Date d = (Date)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
        ArrayList<Date> date = new ArrayList<Date>();
        date.add(d);
        RESULT = date;
    
              CUP$parser$result = new java_cup.runtime.Symbol(55/*multiProgrammationContents*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // multiProgrammationContents ::= multiProgrammationContents VIRGULE programmationContents 
            {
              ArrayList<Date> RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Date> l = (ArrayList<Date>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Date d = (Date)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
        ArrayList<Date> date = new ArrayList<Date>();
        date.addAll(l);
        date.add(d);
        RESULT = date;
    
              CUP$parser$result = new java_cup.runtime.Symbol(55/*multiProgrammationContents*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // commandeProgrammation ::= PROGRAMMER IDENTIFIANT AFFECTATION ACO_GAUCHE multiProgrammationContents ACO_DROITE POINT 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Date> l = (ArrayList<Date>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        this.addScenarioDate(id, l);
        Iterator<Date> itr = l.iterator();
        while(itr.hasNext())
            System.out.println("\t\tProgrammation du scénario \"" + id + "\" pour la date : " + itr.next());
    
              CUP$parser$result = new java_cup.runtime.Symbol(40/*commandeProgrammation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // commandeProgrammation ::= PROGRAMMER IDENTIFIANT AFFECTATION programmationContents POINT 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Date d = (Date)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        ArrayList<Date> l = new ArrayList<Date>();
        l.add(d);
        this.addScenarioDate(id, l);
        System.out.println("\t\tProgrammation du scénario \"" + id + "\" pour l'unique date : " + d);
    
              CUP$parser$result = new java_cup.runtime.Symbol(40/*commandeProgrammation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // commandeAssociation ::= ASSOCIER IDENTIFIANT AFFECTATION ACO_GAUCHE identMult ACO_DROITE POINT 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<String> l = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        this.addAssociationScenario(id, l);
        System.out.println("\t\tAssociation de l'interface \"" + id + "\" au scénario \"" + l + "\".");
    
              CUP$parser$result = new java_cup.runtime.Symbol(39/*commandeAssociation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // commandeAssociation ::= ASSOCIER IDENTIFIANT AFFECTATION IDENTIFIANT POINT 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        ArrayList<String> l = new ArrayList<String>();
        l.add(s);
        this.addAssociationScenario(id, l);
        System.out.println("\t\tAssociation de l'interface \"" + id + "\" au scénario \"" + s + "\".");
    
              CUP$parser$result = new java_cup.runtime.Symbol(39/*commandeAssociation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // instructionsCommande ::= commandeProgrammation 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(27/*instructionsCommande*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // instructionsCommande ::= commandeAssociation 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(27/*instructionsCommande*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // listInstructionsCommande ::= instructionsCommande 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(26/*listInstructionsCommande*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // listInstructionsCommande ::= listInstructionsCommande instructionsCommande 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(26/*listInstructionsCommande*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // declarationCommande ::= openCommande NT$13 listInstructionsCommande closeCommande 
            {
              Object RESULT = null;
              // propagate RESULT from NT$13
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 System.out.println("\tCommandes déclarées."); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*declarationCommande*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NT$13 ::= 
            {
              Object RESULT = null;
 System.out.println("\tDéclaration des commandes..."); 
              CUP$parser$result = new java_cup.runtime.Symbol(70/*NT$13*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // commandeMessage ::= MESSAGE PAR_GAUCHE CHAINE PAR_DROITE POINT_VIRGULE 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        System.out.println("\t\t\tMessage : " + c + ".");
    
              CUP$parser$result = new java_cup.runtime.Symbol(38/*commandeMessage*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // commandeExecuterScenario ::= EXECUTER_SCENARIO IDENTIFIANT POINT_VIRGULE 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        System.out.println("\t\t\tExecution du scénario \"" + id + "\".");
    
              CUP$parser$result = new java_cup.runtime.Symbol(37/*commandeExecuterScenario*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // condition ::= IDENTIFIANT POINT ETAT EGALITE etatAppareil 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
        System.out.print("\t\t\t\"" + id + "\".etat == \"" + e + "\"");
        
        String type = data.getType(id);
        if(type == null)
            System.out.println("Erreur. L'identifiant d'appareil \"" + id + "\" n'existe pas.");
        else {       
            data.addScenarioContent("for(CAppareil appareil : this.l_appareils)");
            data.addScenarioContent("if(appareil.getNomAppareil().equals(\"" + id + "\"))");
            data.addScenarioContent("if(appareil.etatAppareil.equals(TypeEtatAppareil." + e.toUpperCase() + ")) {");
        }
    
              CUP$parser$result = new java_cup.runtime.Symbol(33/*condition*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // subTestCondition ::= SINON NT$11 listInstructionsScenario NT$12 FSI POINT_VIRGULE 
            {
              Object RESULT = null;
              // propagate RESULT from NT$11
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
              // propagate RESULT from NT$12
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(41/*subTestCondition*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NT$12 ::= 
            {
              Object RESULT = null;
 //Faire n'importe quelle action disponibles dans un scenario
        data.addScenarioContent("}");
    
              CUP$parser$result = new java_cup.runtime.Symbol(69/*NT$12*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NT$11 ::= 
            {
              Object RESULT = null;

        System.out.print("\n\t\t\tSinon\n\t");
        data.addScenarioContent("else {");
    
              CUP$parser$result = new java_cup.runtime.Symbol(68/*NT$11*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // subTestCondition ::= FSI POINT_VIRGULE 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(41/*subTestCondition*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // testCondition ::= SI PAR_GAUCHE NT$8 condition PAR_DROITE ALORS NT$9 listInstructionsScenario NT$10 subTestCondition 
            {
              Object RESULT = null;
              // propagate RESULT from NT$8
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
              // propagate RESULT from NT$9
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
              // propagate RESULT from NT$10
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(32/*testCondition*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NT$10 ::= 
            {
              Object RESULT = null;
 //Faire n'importe quelle action disponibles dans un scenario
        data.addScenarioContent("}");
    
              CUP$parser$result = new java_cup.runtime.Symbol(67/*NT$10*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$9 ::= 
            {
              Object RESULT = null;

        System.out.print("\n\t\t\talors\n\t");
    
              CUP$parser$result = new java_cup.runtime.Symbol(66/*NT$9*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$8 ::= 
            {
              Object RESULT = null;

        System.out.print("\t\t\tSi\n\t");
    
              CUP$parser$result = new java_cup.runtime.Symbol(65/*NT$8*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // parcours ::= POURTOUT IDENTIFIANT DEUX_POINT identifiantDefintion FAIRE NT$6 listInstructionsScenario NT$7 FAIT POINT_VIRGULE 
            {
              Object RESULT = null;
              // propagate RESULT from NT$6
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
              // propagate RESULT from NT$7
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idRefleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idRefright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String idRef = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(31/*parcours*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$7 ::= 
            {
              Object RESULT = null;
		int idRefleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idRefright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String idRef = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
 //Faire n'importe quelle action disponibles dans un scenario
        data.addScenarioContent("}");
        data.removeTemporalyIdent(idRef);
    
              CUP$parser$result = new java_cup.runtime.Symbol(64/*NT$7*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$6 ::= 
            {
              Object RESULT = null;
		int idRefleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idRefright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String idRef = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

        data.addTemporalyIdent(e, idRef);
        System.out.print("\t\t\tPourtout tout \"" + idRef + "\" de type \"" + e + "\" faire\n\t");
        
        data.addScenarioContent("for(CAppareil appareil : this.l_appareils)");
        data.addScenarioContent("if(appareil.typeAppareil.equals(TypeAppareil." + e.toUpperCase() + ")) {");
    
              CUP$parser$result = new java_cup.runtime.Symbol(63/*NT$6*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // appelAction ::= IDENTIFIANT POINT listAction 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
        String type = data.getType(id);
        if(type == null)
            System.out.println("Erreur. L'identifiant d'appareil \"" + id + "\" n'existe pas.");
        else {       
            if(data.hasDefinirGroupe(id)){
            System.out.println("frffffffffffffff");
            }
            if(!data.hasAction(type, a))
                System.out.println("Erreur. L'action \"" + a + "\" n'existe pas pour \"" + id + "\"."); 
            else {     
                System.out.print("\t\t\tMéthode \"" + a + "\" appelé sur \"" + id + "\"");
                
                
                ArrayList<String> current = data.getIdentScenario().get(currentScenario);
                
                if(current != null && current.size() >= 1 && !(current.get(current.size() - 1).startsWith("if") || current.get(current.size() - 1).startsWith("else {"))) {
                    data.addScenarioContent("for(CAppareil appareil : this.l_appareils)");
                    data.addScenarioContent("if(appareil.getNomAppareil().equals(\"" + id + "\"))");
                } else if(current == null) {
                    data.addScenarioContent("for(CAppareil appareil : this.l_appareils)");
                    data.addScenarioContent("if(appareil.getNomAppareil().equals(\"" + id + "\"))");
                }
                
                
                data.addScenarioContent("appareil.appliquer(TypeActionAppareil." + a.toUpperCase() + ");");
            }     
        }
    
              CUP$parser$result = new java_cup.runtime.Symbol(42/*appelAction*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // actionAppareil ::= appelAction POINT_VIRGULE 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(30/*actionAppareil*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // instructionsScenario ::= commandeMessage 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(29/*instructionsScenario*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // instructionsScenario ::= commandeExecuterScenario 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(29/*instructionsScenario*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // instructionsScenario ::= testCondition 
            {
              Object RESULT = null;
		
        System.out.println("");
    
              CUP$parser$result = new java_cup.runtime.Symbol(29/*instructionsScenario*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // instructionsScenario ::= parcours 
            {
              Object RESULT = null;
		
        System.out.println("");
    
              CUP$parser$result = new java_cup.runtime.Symbol(29/*instructionsScenario*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // instructionsScenario ::= actionAppareil 
            {
              Object RESULT = null;
		
        System.out.println(".");
    
              CUP$parser$result = new java_cup.runtime.Symbol(29/*instructionsScenario*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // listInstructionsScenario ::= instructionsScenario 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(28/*listInstructionsScenario*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // listInstructionsScenario ::= listInstructionsScenario instructionsScenario 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(28/*listInstructionsScenario*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // scenario ::= openScenario NT$5 listInstructionsScenario closeScenario 
            {
              Object RESULT = null;
              // propagate RESULT from NT$5
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idOpenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idOpenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String idOpen = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idCloseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idCloseright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String idClose = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
        if(idOpen.equals(idClose)) {
            //this.addIdentScenario(idOpen);
            System.out.println("\t\tScenario \"" + idClose + "\" déclaré.\n");
        } else
            System.out.println("Erreur. Les identifiants dans les balises de scenario doivent être identiques.");
        this.currentScenario = "";
        
    
              CUP$parser$result = new java_cup.runtime.Symbol(18/*scenario*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$5 ::= 
            {
              Object RESULT = null;
		int idOpenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idOpenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String idOpen = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
 
        System.out.println("\t\tDéclaration du Scenario \"" + idOpen + "\"...");
        this.currentScenario = idOpen;
    
              CUP$parser$result = new java_cup.runtime.Symbol(62/*NT$5*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // scenariiContent ::= scenario 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*scenariiContent*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // scenariiContent ::= scenariiContent scenario 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*scenariiContent*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // declarationScenarii ::= openScenarii NT$4 scenariiContent closeScenarii 
            {
              Object RESULT = null;
              // propagate RESULT from NT$4
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 System.out.println("\tScenarii déclaré.\n"); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*declarationScenarii*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$4 ::= 
            {
              Object RESULT = null;
 System.out.println("\tDéclaration du Scenarii...\n"); 
              CUP$parser$result = new java_cup.runtime.Symbol(61/*NT$4*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // identMult ::= error VIRGULE 
            {
              ArrayList<String> RESULT = null;
		
        System.out.println("Erreur. Les identifiant doivent être séparés d'un autre identifiant par une virgule.");
        ArrayList<String> list = new ArrayList<String>();
        RESULT = list; 
    
              CUP$parser$result = new java_cup.runtime.Symbol(53/*identMult*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // identMult ::= IDENTIFIANT error 
            {
              ArrayList<String> RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        System.out.println("Erreur. L'identifiant \"" + id + "\" doit être séparé d'un autre identifiant par une virgule.");
        ArrayList<String> list = new ArrayList<String>();
        RESULT = list; 
    
              CUP$parser$result = new java_cup.runtime.Symbol(53/*identMult*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // identMult ::= identMult VIRGULE IDENTIFIANT 
            {
              ArrayList<String> RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<String> l = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
            ArrayList<String> list = new ArrayList<String>();
            list.addAll(l);
            list.add(id);
            RESULT = list;
    
              CUP$parser$result = new java_cup.runtime.Symbol(53/*identMult*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // identMult ::= IDENTIFIANT 
            {
              ArrayList<String> RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
        ArrayList<String> list = new ArrayList<String>();
        list.add(id);
        RESULT = list;
    
              CUP$parser$result = new java_cup.runtime.Symbol(53/*identMult*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // identifiantInterface ::= interface identMult POINT 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> l = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        if(a != null) {
            this.addIdentInterface(a, l);
            System.out.println("\t\tDéclaration des interfaces " + l + " de type \"" + a + "\".");
        }
    
              CUP$parser$result = new java_cup.runtime.Symbol(25/*identifiantInterface*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // instructionsInterface ::= identifiantInterface 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(24/*instructionsInterface*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // listInstructionsInterface ::= instructionsInterface 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(23/*listInstructionsInterface*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // listInstructionsInterface ::= listInstructionsInterface instructionsInterface 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(23/*listInstructionsInterface*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // declarationInterfaces ::= openInterfaces NT$3 listInstructionsInterface closeInterfaces 
            {
              Object RESULT = null;
              // propagate RESULT from NT$3
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 System.out.println("\tInterfaces déclarées.\n"); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*declarationInterfaces*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$3 ::= 
            {
              Object RESULT = null;
 System.out.println("\tDéclaration des interfaces..."); 
              CUP$parser$result = new java_cup.runtime.Symbol(60/*NT$3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // commandeDefinition ::= DEFINIR IDENTIFIANT AFFECTATION ACO_GAUCHE identMult ACO_DROITE POINT 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<String> l = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        this.addDefinirGroupe(id, l);
        System.out.println("\t\tDéclaration de l'ensemble des appareils \"" + id + "\" contenant " + l + ".");
    
              CUP$parser$result = new java_cup.runtime.Symbol(36/*commandeDefinition*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // autreAppareilDefinition ::= AUTRE_APPAREIL PAR_GAUCHE autreAppareil NT$2 PAR_DROITE 
            {
              String RESULT = null;
              // propagate RESULT from NT$2
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(51/*autreAppareilDefinition*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$2 ::= 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
 RESULT = a; 
              CUP$parser$result = new java_cup.runtime.Symbol(59/*NT$2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // commandeAutreAppareil ::= autreAppareilDefinition identMult POINT 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> l = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        this.addIdentAppareil("autre_appareil", l);
        System.out.println("\t\tDéclaration des appareils " + l + " de type \"" + a + "\".");
    
              CUP$parser$result = new java_cup.runtime.Symbol(35/*commandeAutreAppareil*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // commandeDeclarationAppareil ::= appareil error 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("Error. La déclarations d'un appareil doit se terminer par un point."); 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*commandeDeclarationAppareil*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // commandeDeclarationAppareil ::= appareil IDENTIFIANT error 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 System.out.println("Error. La déclarations d'un appareil doit se terminer par un point."); 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*commandeDeclarationAppareil*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // commandeDeclarationAppareil ::= appareil identMult POINT 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> l = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        this.addIdentAppareil(a, l);
        System.out.println("\t\tDéclaration des appareils " + l + " de type \"" + a + "\".");
    
              CUP$parser$result = new java_cup.runtime.Symbol(34/*commandeDeclarationAppareil*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instructionsAppareil ::= commandeDefinition 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(22/*instructionsAppareil*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instructionsAppareil ::= commandeAutreAppareil 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(22/*instructionsAppareil*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instructionsAppareil ::= commandeDeclarationAppareil 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(22/*instructionsAppareil*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // listInstructionsAppareil ::= instructionsAppareil 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(21/*listInstructionsAppareil*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // listInstructionsAppareil ::= listInstructionsAppareil instructionsAppareil 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(21/*listInstructionsAppareil*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declarationAppareils ::= openAppareils NT$1 listInstructionsAppareil closeAppareils 
            {
              Object RESULT = null;
              // propagate RESULT from NT$1
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 System.out.println("\tAppareils déclarés.\n"); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*declarationAppareils*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$1 ::= 
            {
              Object RESULT = null;
 System.out.println("\tDéclaration des appareils..."); 
              CUP$parser$result = new java_cup.runtime.Symbol(58/*NT$1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declarationAppareilsInterfaces ::= declarationInterfaces declarationAppareils 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*declarationAppareilsInterfaces*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declarationAppareilsInterfaces ::= declarationAppareils declarationInterfaces 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*declarationAppareilsInterfaces*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // domusContent ::= declarationAppareilsInterfaces declarationScenarii declarationCommande 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*domusContent*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // domus ::= openDomus NT$0 domusContent closeDomus 
            {
              Object RESULT = null;
              // propagate RESULT from NT$0
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 System.out.println("Domus déclaré."); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*domus*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$0 ::= 
            {
              Object RESULT = null;
 System.out.println("Début du Domus..."); 
              CUP$parser$result = new java_cup.runtime.Symbol(57/*NT$0*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // prog ::= 
            {
              Object RESULT = null;
		
        System.out.println("Fichier vide.");
    
              CUP$parser$result = new java_cup.runtime.Symbol(1/*prog*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= prog EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // prog ::= domus 
            {
              Object RESULT = null;
		
        System.out.println("Analyse terminée.\n");
        this.generateFiles();
    
              CUP$parser$result = new java_cup.runtime.Symbol(1/*prog*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

