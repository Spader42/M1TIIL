
//----------------------------------------------------
// The following code was generated by CUP v0.10k TUM Edition 20050516
// Wed Dec 07 08:57:21 CET 2016
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.FileWriter;
import java.io.File;
import java.io.BufferedWriter;
import java.io.IOException;

/** CUP v0.10k TUM Edition 20050516 generated parser.
  * @version Wed Dec 07 08:57:21 CET 2016
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\166\000\002\003\003\000\002\002\004\000\002\003" +
    "\002\000\002\071\002\000\002\004\006\000\002\007\005" +
    "\000\002\010\004\000\002\010\004\000\002\072\002\000" +
    "\002\013\006\000\002\027\004\000\002\027\003\000\002" +
    "\030\003\000\002\030\003\000\002\030\003\000\002\043" +
    "\005\000\002\044\005\000\002\073\002\000\002\063\007" +
    "\000\002\045\011\000\002\074\002\000\002\014\006\000" +
    "\002\031\004\000\002\031\003\000\002\032\005\000\002" +
    "\065\003\000\002\065\005\000\002\075\002\000\002\011" +
    "\006\000\002\023\004\000\002\023\003\000\002\076\002" +
    "\000\002\024\006\000\002\035\004\000\002\035\003\000" +
    "\002\036\003\000\002\036\003\000\002\036\003\000\002" +
    "\036\003\000\002\036\003\000\002\037\004\000\002\052" +
    "\005\000\002\077\002\000\002\040\013\000\002\100\002" +
    "\000\002\101\002\000\002\041\014\000\002\042\005\000" +
    "\002\046\005\000\002\047\007\000\002\102\002\000\002" +
    "\012\006\000\002\033\004\000\002\033\003\000\002\034" +
    "\003\000\002\034\003\000\002\050\007\000\002\050\011" +
    "\000\002\051\007\000\002\051\011\000\002\067\005\000" +
    "\002\067\003\000\002\066\015\000\002\070\003\000\002" +
    "\070\003\000\002\005\005\000\002\006\006\000\002\015" +
    "\005\000\002\016\006\000\002\017\005\000\002\020\006" +
    "\000\002\021\005\000\002\022\006\000\002\053\006\000" +
    "\002\054\007\000\002\025\005\000\002\026\006\000\002" +
    "\064\003\000\002\064\003\000\002\061\003\000\002\061" +
    "\003\000\002\061\003\000\002\061\003\000\002\055\003" +
    "\000\002\055\003\000\002\055\003\000\002\055\003\000" +
    "\002\055\003\000\002\057\003\000\002\057\003\000\002" +
    "\057\003\000\002\057\003\000\002\057\003\000\002\056" +
    "\003\000\002\056\003\000\002\056\003\000\002\056\003" +
    "\000\002\056\003\000\002\056\003\000\002\056\003\000" +
    "\002\056\003\000\002\056\003\000\002\060\003\000\002" +
    "\060\003\000\002\060\003\000\002\060\003\000\002\060" +
    "\003\000\002\060\003\000\002\060\003\000\002\060\003" +
    "\000\002\060\003\000\002\060\003\000\002\062\003\000" +
    "\002\062\003\000\002\062\003\000\002\062\003\000\002" +
    "\062\003\000\002\062\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\352\000\006\002\uffff\101\005\001\002\000\004\101" +
    "\ufffe\001\002\000\004\064\011\001\002\000\004\002\001" +
    "\001\002\000\004\002\010\001\002\000\004\002\000\001" +
    "\002\000\004\102\012\001\002\000\004\101\uffc0\001\002" +
    "\000\004\101\017\001\002\000\004\101\353\001\002\000" +
    "\014\012\uffed\013\uffed\014\uffed\015\uffed\016\uffed\001\002" +
    "\000\020\004\ufff9\005\ufff9\006\ufff9\007\ufff9\010\ufff9\011" +
    "\ufff9\057\ufff9\001\002\000\006\065\025\066\304\001\002" +
    "\000\004\101\277\001\002\000\004\101\031\001\002\000" +
    "\004\101\024\001\002\000\004\101\ufffa\001\002\000\004" +
    "\065\025\001\002\000\004\102\026\001\002\000\020\004" +
    "\uffbe\005\uffbe\006\uffbe\007\uffbe\010\uffbe\011\uffbe\057\uffbe" +
    "\001\002\000\004\101\212\001\002\000\004\101\uffe6\001" +
    "\002\000\004\067\032\001\002\000\004\102\033\001\002" +
    "\000\004\101\uffba\001\002\000\004\101\036\001\002\000" +
    "\004\101\205\001\002\000\004\071\201\001\002\000\004" +
    "\101\uffe3\001\002\000\014\050\uffe2\053\uffe2\060\uffe2\063" +
    "\uffe2\111\uffe2\001\002\000\014\050\045\053\056\060\054" +
    "\063\044\111\053\001\002\000\022\050\uffde\052\uffde\053" +
    "\uffde\056\uffde\060\uffde\063\uffde\101\uffde\111\uffde\001\002" +
    "\000\022\050\uffdb\052\uffdb\053\uffdb\056\uffdb\060\uffdb\063" +
    "\uffdb\101\uffdb\111\uffdb\001\002\000\004\072\175\001\002" +
    "\000\004\111\127\001\002\000\016\050\045\053\056\060" +
    "\054\063\044\101\121\111\053\001\002\000\022\050\uffdf" +
    "\052\uffdf\053\uffdf\056\uffdf\060\uffdf\063\uffdf\101\uffdf\111" +
    "\uffdf\001\002\000\022\050\uffda\052\uffda\053\uffda\056\uffda" +
    "\060\uffda\063\uffda\101\uffda\111\uffda\001\002\000\022\050" +
    "\uffdc\052\uffdc\053\uffdc\056\uffdc\060\uffdc\063\uffdc\101\uffdc" +
    "\111\uffdc\001\002\000\022\050\uffdd\052\uffdd\053\uffdd\056" +
    "\uffdd\060\uffdd\063\uffdd\101\uffdd\111\uffdd\001\002\000\004" +
    "\105\105\001\002\000\004\111\103\001\002\000\004\100" +
    "\102\001\002\000\004\072\057\001\002\000\004\111\uffd5" +
    "\001\002\000\004\111\053\001\002\000\004\077\072\001" +
    "\002\000\004\073\063\001\002\000\004\054\064\001\002" +
    "\000\014\050\uffd4\053\uffd4\060\uffd4\063\uffd4\111\uffd4\001" +
    "\002\000\014\050\045\053\056\060\054\063\044\111\053" +
    "\001\002\000\016\050\045\053\056\056\067\060\054\063" +
    "\044\111\053\001\002\000\004\100\071\001\002\000\022" +
    "\050\uffe0\052\uffe0\053\uffe0\056\uffe0\060\uffe0\063\uffe0\101" +
    "\uffe0\111\uffe0\001\002\000\022\050\uffd3\052\uffd3\053\uffd3" +
    "\056\uffd3\060\uffd3\063\uffd3\101\uffd3\111\uffd3\001\002\000" +
    "\016\030\075\031\076\032\077\033\101\034\073\035\074" +
    "\001\002\000\004\073\uff8d\001\002\000\004\073\uff8c\001" +
    "\002\000\004\073\uff91\001\002\000\004\073\uff90\001\002" +
    "\000\004\073\uff8f\001\002\000\004\073\uffd2\001\002\000" +
    "\004\073\uff8e\001\002\000\022\050\uffd9\052\uffd9\053\uffd9" +
    "\056\uffd9\060\uffd9\063\uffd9\101\uffd9\111\uffd9\001\002\000" +
    "\004\100\104\001\002\000\022\050\uffd1\052\uffd1\053\uffd1" +
    "\056\uffd1\060\uffd1\063\uffd1\101\uffd1\111\uffd1\001\002\000" +
    "\026\036\113\037\107\040\116\041\117\042\111\043\120" +
    "\044\112\045\106\046\114\047\110\001\002\000\006\077" +
    "\uff94\100\uff94\001\002\000\006\077\uff9a\100\uff9a\001\002" +
    "\000\006\077\uff92\100\uff92\001\002\000\006\077\uff97\100" +
    "\uff97\001\002\000\006\077\uff95\100\uff95\001\002\000\006" +
    "\077\uff9b\100\uff9b\001\002\000\006\077\uff93\100\uff93\001" +
    "\002\000\006\077\uffd8\100\uffd8\001\002\000\006\077\uff99" +
    "\100\uff99\001\002\000\006\077\uff98\100\uff98\001\002\000" +
    "\006\077\uff96\100\uff96\001\002\000\004\103\123\001\002" +
    "\000\004\101\uffe1\001\002\000\004\071\124\001\002\000" +
    "\004\111\125\001\002\000\004\102\126\001\002\000\004" +
    "\101\uffb7\001\002\000\004\107\130\001\002\000\054\004" +
    "\162\005\146\006\145\007\163\010\134\011\157\012\137" +
    "\013\152\014\151\015\150\016\143\017\155\020\142\021" +
    "\140\022\132\023\153\024\147\025\156\026\160\027\136" +
    "\111\144\001\002\000\004\051\uffb1\001\002\000\006\051" +
    "\uffa1\073\uffa1\001\002\000\004\051\uffb2\001\002\000\006" +
    "\051\uffaa\111\uffaa\001\002\000\004\051\uffb3\001\002\000" +
    "\006\051\uff9d\073\uff9d\001\002\000\006\051\uffa9\111\uffa9" +
    "\001\002\000\006\051\uffa2\073\uffa2\001\002\000\004\051" +
    "\uffb0\001\002\000\006\051\uffa3\073\uffa3\001\002\000\006" +
    "\051\uffa5\111\uffa5\001\002\000\004\051\uffaf\001\002\000" +
    "\006\051\uffac\111\uffac\001\002\000\006\051\uffad\111\uffad" +
    "\001\002\000\006\051\uff9f\073\uff9f\001\002\000\006\051" +
    "\uffa6\111\uffa6\001\002\000\006\051\uffa7\111\uffa7\001\002" +
    "\000\006\051\uffa8\111\uffa8\001\002\000\006\051\uffa0\073" +
    "\uffa0\001\002\000\004\051\170\001\002\000\006\051\uffa4" +
    "\073\uffa4\001\002\000\006\051\uff9e\073\uff9e\001\002\000" +
    "\004\072\164\001\002\000\006\051\uff9c\073\uff9c\001\002" +
    "\000\004\051\uffb4\001\002\000\006\051\uffae\111\uffae\001" +
    "\002\000\006\051\uffab\111\uffab\001\002\000\024\017\155" +
    "\020\142\021\140\022\132\023\153\024\147\025\156\026" +
    "\160\027\136\001\002\000\004\073\ufff0\001\002\000\004" +
    "\073\167\001\002\000\006\051\uffef\111\uffef\001\002\000" +
    "\014\050\uffd7\053\uffd7\060\uffd7\063\uffd7\111\uffd7\001\002" +
    "\000\014\050\045\053\056\060\054\063\044\111\053\001" +
    "\002\000\016\050\045\052\173\053\056\060\054\063\044" +
    "\111\053\001\002\000\004\100\174\001\002\000\022\050" +
    "\uffd6\052\uffd6\053\uffd6\056\uffd6\060\uffd6\063\uffd6\101\uffd6" +
    "\111\uffd6\001\002\000\004\112\176\001\002\000\004\073" +
    "\177\001\002\000\004\100\200\001\002\000\022\050\uffd0" +
    "\052\uffd0\053\uffd0\056\uffd0\060\uffd0\063\uffd0\101\uffd0\111" +
    "\uffd0\001\002\000\004\111\202\001\002\000\004\102\203" +
    "\001\002\000\014\050\uffb8\053\uffb8\060\uffb8\063\uffb8\111" +
    "\uffb8\001\002\000\004\101\uffe5\001\002\000\006\071\201" +
    "\103\207\001\002\000\004\101\uffe4\001\002\000\004\067" +
    "\210\001\002\000\004\102\211\001\002\000\004\101\uffb9" +
    "\001\002\000\004\070\275\001\002\000\004\101\ufffc\001" +
    "\002\000\006\061\uffcf\062\uffcf\001\002\000\006\061\216" +
    "\062\221\001\002\000\004\111\262\001\002\000\010\061" +
    "\216\062\221\101\254\001\002\000\010\061\uffca\062\uffca" +
    "\101\uffca\001\002\000\004\111\224\001\002\000\010\061" +
    "\uffcc\062\uffcc\101\uffcc\001\002\000\010\061\uffcb\062\uffcb" +
    "\101\uffcb\001\002\000\004\076\225\001\002\000\006\072" +
    "\227\074\230\001\002\000\004\105\253\001\002\000\006" +
    "\104\240\110\241\001\002\000\004\072\227\001\002\000" +
    "\006\075\uffc4\106\uffc4\001\002\000\006\075\234\106\233" +
    "\001\002\000\004\072\227\001\002\000\004\105\235\001" +
    "\002\000\010\061\uffc6\062\uffc6\101\uffc6\001\002\000\006" +
    "\075\uffc5\106\uffc5\001\002\000\004\106\242\001\002\000" +
    "\006\073\uffc1\106\uffc1\001\002\000\006\073\uffc2\106\uffc2" +
    "\001\002\000\006\104\240\110\241\001\002\000\004\106" +
    "\244\001\002\000\006\104\240\110\241\001\002\000\004" +
    "\106\246\001\002\000\006\104\240\110\241\001\002\000" +
    "\004\106\250\001\002\000\006\104\240\110\241\001\002" +
    "\000\004\073\252\001\002\000\010\075\uffc3\105\uffc3\106" +
    "\uffc3\001\002\000\010\061\uffc7\062\uffc7\101\uffc7\001\002" +
    "\000\004\103\257\001\002\000\004\101\uffce\001\002\000" +
    "\010\061\uffcd\062\uffcd\101\uffcd\001\002\000\004\070\260" +
    "\001\002\000\004\102\261\001\002\000\004\101\uffb5\001" +
    "\002\000\004\076\263\001\002\000\006\074\265\111\264" +
    "\001\002\000\004\105\274\001\002\000\004\111\267\001" +
    "\002\000\006\075\271\106\270\001\002\000\010\075\uffe8" +
    "\105\uffe8\106\uffe8\001\002\000\004\111\273\001\002\000" +
    "\004\105\272\001\002\000\010\061\uffc8\062\uffc8\101\uffc8" +
    "\001\002\000\010\075\uffe7\105\uffe7\106\uffe7\001\002\000" +
    "\010\061\uffc9\062\uffc9\101\uffc9\001\002\000\004\102\276" +
    "\001\002\000\006\061\uffb6\062\uffb6\001\002\000\004\103" +
    "\301\001\002\000\004\002\ufffd\001\002\000\004\064\302" +
    "\001\002\000\004\102\303\001\002\000\004\002\uffbf\001" +
    "\002\000\004\102\305\001\002\000\014\012\uffbc\013\uffbc" +
    "\014\uffbc\015\uffbc\016\uffbc\001\002\000\020\004\162\005" +
    "\146\006\145\007\163\010\134\011\157\057\316\001\002" +
    "\000\022\004\162\005\146\006\145\007\163\010\134\011" +
    "\157\057\316\101\333\001\002\000\022\004\ufff6\005\ufff6" +
    "\006\ufff6\007\ufff6\010\ufff6\011\ufff6\057\ufff6\101\ufff6\001" +
    "\002\000\004\111\267\001\002\000\022\004\ufff3\005\ufff3" +
    "\006\ufff3\007\ufff3\010\ufff3\011\ufff3\057\ufff3\101\ufff3\001" +
    "\002\000\022\004\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5" +
    "\011\ufff5\057\ufff5\101\ufff5\001\002\000\022\004\ufff4\005" +
    "\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4\057\ufff4\101\ufff4" +
    "\001\002\000\004\111\267\001\002\000\004\111\317\001" +
    "\002\000\004\076\320\001\002\000\004\074\321\001\002" +
    "\000\004\111\267\001\002\000\006\075\323\106\270\001" +
    "\002\000\004\105\324\001\002\000\022\004\uffee\005\uffee" +
    "\006\uffee\007\uffee\010\uffee\011\uffee\057\uffee\101\uffee\001" +
    "\002\000\006\105\326\106\270\001\002\000\022\004\ufff1" +
    "\005\ufff1\006\ufff1\007\ufff1\010\ufff1\011\ufff1\057\ufff1\101" +
    "\ufff1\001\002\000\006\105\330\106\270\001\002\000\022" +
    "\004\ufff2\005\ufff2\006\ufff2\007\ufff2\010\ufff2\011\ufff2\057" +
    "\ufff2\101\ufff2\001\002\000\022\004\ufff7\005\ufff7\006\ufff7" +
    "\007\ufff7\010\ufff7\011\ufff7\057\ufff7\101\ufff7\001\002\000" +
    "\004\101\ufff8\001\002\000\004\103\334\001\002\000\004" +
    "\065\335\001\002\000\004\102\336\001\002\000\004\101" +
    "\uffbd\001\002\000\014\012\137\013\152\014\151\015\150" +
    "\016\143\001\002\000\016\012\uffea\013\uffea\014\uffea\015" +
    "\uffea\016\uffea\101\uffea\001\002\000\004\111\267\001\002" +
    "\000\016\012\137\013\152\014\151\015\150\016\143\101" +
    "\345\001\002\000\004\101\uffec\001\002\000\016\012\uffeb" +
    "\013\uffeb\014\uffeb\015\uffeb\016\uffeb\101\uffeb\001\002\000" +
    "\004\103\346\001\002\000\004\066\347\001\002\000\004" +
    "\102\350\001\002\000\004\101\uffbb\001\002\000\006\105" +
    "\352\106\270\001\002\000\016\012\uffe9\013\uffe9\014\uffe9" +
    "\015\uffe9\016\uffe9\101\uffe9\001\002\000\004\066\304\001" +
    "\002\000\004\101\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\352\000\010\003\006\004\005\005\003\001\001\000" +
    "\004\071\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\007\017\010\020\013\013\014\021" +
    "\015\015\017\014\001\001\000\006\014\353\017\014\001" +
    "\001\000\004\074\336\001\001\000\004\072\305\001\001" +
    "\000\002\001\001\000\004\006\277\001\001\000\006\011" +
    "\026\021\027\001\001\000\006\013\022\015\015\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\212\025\213\001\001\000\004" +
    "\075\033\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\023\034\024\036\053\037\001\001" +
    "\000\010\022\203\024\205\053\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\076\040\001\001\000\022" +
    "\035\045\036\046\037\041\040\051\041\050\046\042\047" +
    "\047\052\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\036\067\037" +
    "\041\040\051\041\050\046\042\047\047\052\054\054\121" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\100\057\001" +
    "\001\000\006\042\061\052\060\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\101\064\001" +
    "\001\000\022\035\065\036\046\037\041\040\051\041\050" +
    "\046\042\047\047\052\054\001\001\000\020\036\067\037" +
    "\041\040\051\041\050\046\042\047\047\052\054\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\062\077\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\060\114\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\055\132\056\140\057" +
    "\130\061\134\063\160\064\153\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\056\164\001\001\000\004\073\165\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\077\170\001\001" +
    "\000\022\035\171\036\046\037\041\040\051\041\050\046" +
    "\042\047\047\052\054\001\001\000\020\036\067\037\041" +
    "\040\051\041\050\046\042\047\047\052\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\102\214\001\001\000\012\033\216\034" +
    "\221\050\222\051\217\001\001\000\002\001\001\000\012" +
    "\026\254\034\255\050\222\051\217\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\066\225\001\001\000\002\001" +
    "\001\000\004\070\236\001\001\000\006\066\230\067\231" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\066" +
    "\235\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\070\242\001\001\000\002\001\001\000\004" +
    "\070\244\001\001\000\002\001\001\000\004\070\246\001" +
    "\001\000\002\001\001\000\004\070\250\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\065\265\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\027\306\030\307\043\312\044\313\045\311\055\310" +
    "\063\314\001\001\000\020\016\331\030\330\043\312\044" +
    "\313\045\311\055\310\063\314\001\001\000\002\001\001" +
    "\000\004\065\326\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\065\324\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\065" +
    "\321\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\031\341\032\337\057\340\001\001" +
    "\000\002\001\001\000\004\065\350\001\001\000\010\020" +
    "\342\032\343\057\340\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public static void main(String args[]) throws Exception {
		new parser(new Yylex(System.in)).parse();
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


    class Date {
        private int annee;
        private int mois;
        private int jour;
        private int heure;
        private int minute;
        
        public Date(int annee, int mois, int jour, int heure, int minute) {
            this.annee  = annee;
            this.mois   = mois;
            this.jour   = jour;
            this.heure  = heure;
            this.minute = minute;
        }
        
        public int getAnnee()   { return this.annee; }
        public int getMois()    { return this.mois; }
        public int getJour()    { return this.jour; }
        public int getHeure()   { return this.heure; }
        public int getMinute()  { return this.minute; }
        
        @Override
        public String toString() {
            return  this.annee +
                    "/" + this.mois + 
                    "/" + this.jour + 
                    " " + this.heure +
                    ":" + this.minute;
        }
    }
    
    class ProgramData {
        private ArrayList<String> identScenario;
        private HashMap<String, ArrayList<String>> temporalyIdent;
        private HashMap<String, ArrayList<String>> identAppareil;
        private HashMap<String, ArrayList<String>> identInterface;
        private HashMap<String, ArrayList<String>> actionsAppareil;
        private HashMap<String, ArrayList<String>> etatsAppareils;
        private HashMap<String, ArrayList<Date>> programmationScenario;
        private HashMap<String, ArrayList<String>> associationScenario;
        
        public ProgramData() {
            this.identScenario          = new ArrayList<String>();
            this.temporalyIdent         = new HashMap<String, ArrayList<String>>();
            this.identAppareil          = new HashMap<String, ArrayList<String>>();
            this.identInterface         = new HashMap<String, ArrayList<String>>();
            this.actionsAppareil        = new HashMap<String, ArrayList<String>>();
            this.etatsAppareils         = new HashMap<String, ArrayList<String>>();
            this.programmationScenario  = new HashMap<String, ArrayList<Date>>();
            this.associationScenario    = new HashMap<String, ArrayList<String>>();
            
            
            ArrayList<String> actionEclairage       = new ArrayList<String>();
            ArrayList<String> actionAlarme          = new ArrayList<String>();
            ArrayList<String> actionChauffage       = new ArrayList<String>();
            ArrayList<String> actionFenetre         = new ArrayList<String>();
            ArrayList<String> actionVolet           = new ArrayList<String>();
            ArrayList<String> actionAutreAppareil   = new ArrayList<String>();
            
            actionEclairage.add("etat");
            actionEclairage.add("allumer");
            actionEclairage.add("eteindre");
            actionEclairage.add("tamiser");
            
            actionAlarme.add("etat");
            actionAlarme.add("allumer");
            actionAlarme.add("allumer_partiel");
            actionAlarme.add("eteindre");
            
            actionChauffage.add("etat");
            actionChauffage.add("allumer");
            actionChauffage.add("allumer_eco");
            actionChauffage.add("eteindre");
            
            actionFenetre.add("etat");
            actionFenetre.add("ouvrir");
            actionFenetre.add("ouvrir_partiel");
            actionFenetre.add("fermer");
            actionFenetre.add("fermer_partiel");
            
            actionVolet.add("etat");
            actionVolet.add("ouvrir");
            actionVolet.add("ouvrir_partiel");
            actionVolet.add("fermer");
            actionVolet.add("fermer_partiel");
            
            actionAutreAppareil.add("etat");
            actionAutreAppareil.add("allumer");
            actionAutreAppareil.add("eteindre");
            
            this.actionsAppareil.put("eclairage", actionEclairage);
            this.actionsAppareil.put("alarme", actionAlarme);
            this.actionsAppareil.put("chauffage", actionChauffage);
            this.actionsAppareil.put("fenetre", actionFenetre);
            this.actionsAppareil.put("volet", actionVolet);
            this.actionsAppareil.put("autre_appareil", actionAutreAppareil);
        }
        
        public HashMap<String, ArrayList<String>> getIdentAppareil() { return this.identAppareil; }
        public HashMap<String, ArrayList<String>> getIdentInterface() { return this.identInterface; }
        public HashMap<String, ArrayList<Date>> getProgrammationScenario() { return this.programmationScenario; }
        public HashMap<String, ArrayList<String>> getAssociationScenario() { return this.associationScenario; }
        
        public void addIdentAppareil(String type, String ident) {
            if(!this.identAppareil.containsKey(type)) {
                this.identAppareil.put(type, new ArrayList<String>());
                this.identAppareil.get(type).add(ident);
            } else
                this.identAppareil.get(type).add(ident);
         }
        
        public void addIdentInterface(String type, String ident) {
            if(!this.identInterface.containsKey(type)) {
                this.identInterface.put(type, new ArrayList<String>());
                this.identInterface.get(type).add(ident);
            } else
                this.identInterface.get(type).add(ident);
        }
        
        public void addIdentScenario(String ident) { this.identScenario.add(ident); }
        
        public void addTemporalyIdent(String type, String ident) {
            if(!this.temporalyIdent.containsKey(type)) {
                this.temporalyIdent.put(type, new ArrayList<String>());
                this.temporalyIdent.get(type).add(ident);
            } else
                this.temporalyIdent.get(type).add(ident);
        }
        
        public void addScenarioDate(String ident, Date date) {
            if(!this.programmationScenario.containsKey(ident)) {
                this.programmationScenario.put(ident, new ArrayList<Date>());
                this.programmationScenario.get(ident).add(date);
            } else
                this.programmationScenario.get(ident).add(date);
        }
        
        public void addAssociationScenario(String ident, String scenario) {
            if(!this.associationScenario.containsKey(ident)) {
                this.associationScenario.put(ident, new ArrayList<String>());
                this.associationScenario.get(ident).add(scenario);
            } else
                this.associationScenario.get(ident).add(scenario);
        }
        
        public boolean hasIdentAppareil(String ident) {
            Collection<ArrayList<String>> values = this.identAppareil.values();
            Iterator<ArrayList<String>> itr = values.iterator();
            while(itr.hasNext()) {
                ArrayList<String> list = itr.next();
                
                Iterator<String> subItr = list.iterator();
                while(subItr.hasNext())
                    if(subItr.next().equals(ident))
                        return true;
            }
            return false;
        }
        
        public boolean hasTemporalyIdent(String ident) {
            Collection<ArrayList<String>> values = this.temporalyIdent.values();
            Iterator<ArrayList<String>> itr = values.iterator();
            while(itr.hasNext()) {
                ArrayList<String> list = itr.next();
                
                Iterator<String> subItr = list.iterator();
                while(subItr.hasNext())
                    if(subItr.next().equals(ident))
                        return true;
            }
            return false;
        }
        
        
        public boolean hasIdentInterface(String ident) {
            Collection<ArrayList<String>> values = this.identInterface.values();
            Iterator<ArrayList<String>> itr = values.iterator();
            while(itr.hasNext()) {
                ArrayList<String> list = itr.next();
                
                Iterator<String> subItr = list.iterator();
                while(subItr.hasNext())
                    if(subItr.next().equals(ident))
                        return true;
            }
            return false;
        }
        
        public boolean hasIdentScenario(String ident) { return this.identScenario.contains(ident); }
        
        public boolean hasActionsAppareil(String appareil, String action) {
            if(!this.actionsAppareil.containsKey(appareil))
                return false;
                
            return this.actionsAppareil.get(appareil).contains(action);
        }
        
        public boolean hasEtatsAppareils(String appareil, String etat) {
            if(!this.actionsAppareil.containsKey(appareil))
                return false;
                
            return this.actionsAppareil.get(appareil).contains(etat);
        }
        
        public boolean hasAction(String ident, String action) {
            if(!this.actionsAppareil.containsKey(ident))
                return false;
            return this.actionsAppareil.get(ident).contains(action);
        }
        
        public String getType(String ident) {
            for(String key : this.identAppareil.keySet())
                if(this.identAppareil.get(key).contains(ident))
                    return key;
                    
             for(String key : this.temporalyIdent.keySet())
                if(this.temporalyIdent.get(key).contains(ident))
                    return key;
                    
            return null;                
        }
    }
    
    
    public void addIdentAppareil(String type, ArrayList<String> l) {
        Iterator<String> itr = l.iterator();
        while(itr.hasNext()) {
            String ident = itr.next();
            if(!data.hasIdentAppareil(ident))
                data.addIdentAppareil(type, ident);
            else
                System.out.println("Erreur. L'identifiant d'apapreil \"" + ident + "\" existe déjà.");
            
        }
    }
    
    public void addIdentInterface(String type, ArrayList<String> l) {
        Iterator<String> itr = l.iterator();
        while(itr.hasNext()) {
            String ident = itr.next();
            if(!data.hasIdentInterface(ident))
                data.addIdentInterface(type, ident);
            else
                System.out.println("Erreur. L'identifiant d'interface \"" + ident + "\" existe déjà.");
            
        }
    }
    
    public void addIdentScenario(String ident) {
        if(!data.hasIdentScenario(ident))
            data.addIdentScenario(ident);
        else
            System.out.println("Erreur. L'identifiant de scenario \"" + ident + "\" existe déjà.");
    }
    
    public void addScenarioDate(String ident, ArrayList<Date> dates) {
        if(!data.hasIdentScenario(ident)) {
            System.out.println("Erreur. Le scenario \"" + ident + "\" n'existe pas.");
            return;
        }
        
        Iterator<Date> itr = dates.iterator();
        while(itr.hasNext())
            data.addScenarioDate(ident, itr.next());
    }
    
    public void addAssociationScenario(String ident, ArrayList<String> scenarii) {
        if(!data.hasIdentInterface(ident)) {
            System.out.println("Erreur. L'interface \"" + ident + "\" n'existe pas, association impossible.");
            return;
        }
        
        Iterator<String> itr = scenarii.iterator();
        while(itr.hasNext())
            data.addAssociationScenario(ident, itr.next());
    }
    
    
    //============================================================//
    //============================================================//
    public void generateFiles() {
        System.out.println("Génération des fichiers java...");
        this.generateCMaisonUser();
        this.generateHabitatSpecific();
    }
    
    private void generateCMaisonUser() {
        try {
            System.out.println("Génération du fichier java CMaisonUSer");
            
            String fileName = "CMaisonUser.java";
            
            File file = new File(fileName);
            
            if(file.exists()) {
                System.out.println("\tLe fichier \"" + fileName + "\" existe déjà.");
                System.out.print("\tSuppression du fichier Java...");
                if(file.delete())
                    System.out.println("OK.");
                else {
                    System.out.println("Echec.");
                    return;
                }
            } else {
                System.out.println("\tLe fichier \"" + fileName + "\" n'existe pas.");
                System.out.print("\tCréation du fichier...");
                if(file.createNewFile())
                    System.out.println("OK.");
                else {
                    System.out.println("Echec.");
                    return;
                }
            }
            
            FileWriter fw = new FileWriter(file.getAbsoluteFile(), true);
            BufferedWriter bw = new BufferedWriter(fw);
            
            
            bw.write("//" + fileName + "\n\n");
            bw.write("public class CMaisonUser extends CMaison {\n");
            bw.write("    public CMaisonUser() {\n");
            bw.write("        super();\n\n");
            
            //Ajout des appareils
            HashMap<String, ArrayList<String>> identAppareil = data.getIdentAppareil();
            bw.write("        //Appareils\n");       
            for(String key : identAppareil.keySet()) {
                ArrayList<String> list = identAppareil.get(key);
                
                String typeAppareil = "C" + key.substring(0, 1).toUpperCase() + key.substring(1);
                
                Iterator<String> subItr = list.iterator();
                while(subItr.hasNext()) {
                    String ident = subItr.next();
                    bw.write( "        " + typeAppareil + " " + ident + " = new " + typeAppareil + "(\"" + ident + "\", TypeAppareil." + key.toUpperCase() + ");\n");
                    bw.write("        ma_liste_appareils.add(" + ident + ");\n");
                }
            }
            
            
            //Ajout des interfaces
            HashMap<String, ArrayList<String>> identInterface = data.getIdentInterface();
            bw.write("\n        //Interfaces\n");       
            for(String key : identInterface.keySet()) {
                ArrayList<String> list = identInterface.get(key);
                
                String typeInterface = "C" + key.substring(0, 1).toUpperCase() + key.substring(1);
                
                Iterator<String> subItr = list.iterator();
                while(subItr.hasNext()) {
                    String ident = subItr.next();
                    bw.write( "        " + typeInterface + " " + ident + " = new " + typeInterface + "(\"" + ident + "\", TypeInterface." + key.toUpperCase() + ");\n");
                    bw.write("        ma_liste_appareils.add(" + ident + ");\n");
                }
            }
            
            
            //Ajout des programmations
            HashMap<String, ArrayList<Date>> programmations = data.getProgrammationScenario();
            bw.write("\n        //Programmations\n");       
            int idProg = 1;
            for(String key : programmations.keySet()) {
                ArrayList<Date> list = programmations.get(key);
                
                String typeProgrammation = "CProgrammation";
                String identProg = "p" + idProg;
                
                bw.write( "        " + typeProgrammation + " " + identProg + " = new " + typeProgrammation + "(\"" + key + "\");\n");                
                
                Iterator<Date> subItr = list.iterator();
                int idDate = 1;
                while(subItr.hasNext()) {
                    String typeDate = "CDate";
                    Date date = subItr.next();
                    String identDate = identProg + "d" + idDate;
                    idDate++;
                    
                    bw.write(   "        "
                                + typeDate + " "
                                + identDate + " = new "
                                + typeDate + "("
                                + date.getAnnee()+ ", "
                                + date.getMois() + ", "
                                + date.getJour() + ", "
                                + date.getHeure() + ", "
                                + date.getMinute()
                                + ");\n");
                                
                    bw.write("        " + identProg + ".addDate(" + identDate + ");\n");
                }
                bw.write("        ma_liste_programmations.add(" + identProg + ");\n\n");
                idProg++;
            }
            
            
            //Ajout des associations
            HashMap<String, ArrayList<String>> associations = data.getAssociationScenario();
            bw.write("        //Associations\n");       
            for(String key : associations.keySet()) {
                ArrayList<String> list = associations.get(key);
                
                Iterator<String> subItr = list.iterator();
                while(subItr.hasNext())
                    bw.write("        " + key + ".addScenarioAssocie(\"" + subItr.next()  + "\");\n");
            }
             
            
            //Finalisation du fichier
            bw.write("\n        //Finalisation\n");
            bw.write("        monHabitat = new HabitatSpecific(ma_liste_appareils, ma_liste_ens_appareils, ma_liste_scenarios, ma_liste_interfaces, ma_liste_programmations);\n");
             
             
            bw.write("    }\n");
            bw.write("}");
            
            bw.close();
            System.out.println("Enregistrement des données terminé.");
        } catch(IOException e) {
           System.out.println("Erreur. " + e.getMessage());
        }
    }
    
    private void generateHabitatSpecific() {
        try {
            System.out.println("Génération du fichier java CMaisonUSer");
            
            String fileName = "HabitatSpecific.java";
            
            File file = new File(fileName);
            
            if(file.exists()) {
                System.out.println("\tLe fichier \"" + fileName + "\" existe déjà.");
                System.out.print("\tSuppression du fichier Java...");
                if(file.delete())
                    System.out.println("OK.");
                else {
                    System.out.println("Echec.");
                    return;
                }
            } else {
                System.out.println("\tLe fichier \"" + fileName + "\" n'existe pas.");
                System.out.print("\tCréation du fichier...");
                if(file.createNewFile())
                    System.out.println("OK.");
                else {
                    System.out.println("Echec.");
                    return;
                }
            }
            
            FileWriter fw = new FileWriter(file.getAbsoluteFile(), true);
            BufferedWriter bw = new BufferedWriter(fw);
            
            bw.write("//" + fileName + "\n\n");
            bw.write("import java.util.ArrayList;\n\n");
            bw.write("public class HabitatSpecific extends Habitat {\n");
            bw.write("    public HabitatSpecific(  ArrayList<CAppareil> lapp,\n");
            bw.write("                             ArrayList<CEnsAppareil> lens,\n");
            bw.write("                             ArrayList<CScenario> lscen,\n");
            bw.write("                             ArrayList<CInterface> lint,\n");
            bw.write("                             ArrayList<CProgrammation> lprog) {\n");
            
            bw.write("        super(lapp,lens,lscen,lint,lprog);\n");
            bw.write("    }\n\n");
                                               
            
            bw.write("    public void execScenarioNum(int num) {\n");
            bw.write("        System.out.println(\"Execution du scenario \"+ this.l_scenarios.get(num).getNomScenario() + \"...\");\n\n");
            bw.write("        switch(num) {\n");
            
            bw.write("        }\n");
            
            
            bw.write("    }\n");
            bw.write("}");
            
            bw.close();
            System.out.println("Enregistrement des données terminé.");
        } catch(IOException e) {
           System.out.println("Erreur. " + e.getMessage());
        }
    }
    //============================================================//
    //============================================================//
    
    
    
    ProgramData data = new ProgramData();

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // etatAppareil ::= FERME 
            {
              String RESULT = null;
		 RESULT = "ferme"; 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*etatAppareil*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // etatAppareil ::= OUVERT 
            {
              String RESULT = null;
		 RESULT = "ouvert"; 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*etatAppareil*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // etatAppareil ::= ECO 
            {
              String RESULT = null;
		 RESULT = "eco"; 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*etatAppareil*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // etatAppareil ::= DEMI 
            {
              String RESULT = null;
		 RESULT = "demi"; 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*etatAppareil*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // etatAppareil ::= ETEINT 
            {
              String RESULT = null;
		 RESULT = "eteint"; 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*etatAppareil*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // etatAppareil ::= ALLUME 
            {
              String RESULT = null;
		 RESULT = "allume"; 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*etatAppareil*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // listAction ::= FERMER_PARTIEL 
            {
              String RESULT = null;
		 RESULT = "fermer_partiel"; 
              CUP$parser$result = new java_cup.runtime.Symbol(46/*listAction*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // listAction ::= OUVRIR_PARTIEL 
            {
              String RESULT = null;
		 RESULT = "ouvrir_partiel"; 
              CUP$parser$result = new java_cup.runtime.Symbol(46/*listAction*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // listAction ::= ALLUMER_ECO 
            {
              String RESULT = null;
		 RESULT = "allumer_eco"; 
              CUP$parser$result = new java_cup.runtime.Symbol(46/*listAction*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // listAction ::= ALLUMER_PARTIEL 
            {
              String RESULT = null;
		 RESULT = "allumer_partiel"; 
              CUP$parser$result = new java_cup.runtime.Symbol(46/*listAction*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // listAction ::= ETAT 
            {
              String RESULT = null;
		 RESULT = "etat"; 
              CUP$parser$result = new java_cup.runtime.Symbol(46/*listAction*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // listAction ::= TAMISER 
            {
              String RESULT = null;
		 RESULT = "tamiser"; 
              CUP$parser$result = new java_cup.runtime.Symbol(46/*listAction*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // listAction ::= ALLUMER 
            {
              String RESULT = null;
		 RESULT = "allumer"; 
              CUP$parser$result = new java_cup.runtime.Symbol(46/*listAction*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // listAction ::= ETEINDRE 
            {
              String RESULT = null;
		 RESULT = "eteindre"; 
              CUP$parser$result = new java_cup.runtime.Symbol(46/*listAction*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // listAction ::= FERMER 
            {
              String RESULT = null;
		 RESULT = "fermer"; 
              CUP$parser$result = new java_cup.runtime.Symbol(46/*listAction*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // listAction ::= OUVRIR 
            {
              String RESULT = null;
		 RESULT = "ouvrir"; 
              CUP$parser$result = new java_cup.runtime.Symbol(46/*listAction*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // autreAppareil ::= ORDINATEUR 
            {
              String RESULT = null;
		 RESULT = "ordinateur"; 
              CUP$parser$result = new java_cup.runtime.Symbol(44/*autreAppareil*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // autreAppareil ::= PORTAIL 
            {
              String RESULT = null;
		 RESULT = "portail"; 
              CUP$parser$result = new java_cup.runtime.Symbol(44/*autreAppareil*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // autreAppareil ::= SECHE_LINGE 
            {
              String RESULT = null;
		 RESULT = "seche_linge"; 
              CUP$parser$result = new java_cup.runtime.Symbol(44/*autreAppareil*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // autreAppareil ::= LAVE_LINGE 
            {
              String RESULT = null;
		 RESULT = "lave_linge"; 
              CUP$parser$result = new java_cup.runtime.Symbol(44/*autreAppareil*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // autreAppareil ::= LAVE_VAISSELLE 
            {
              String RESULT = null;
		 RESULT = "lave_vaisselle"; 
              CUP$parser$result = new java_cup.runtime.Symbol(44/*autreAppareil*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // autreAppareil ::= VIDEO_PROJ 
            {
              String RESULT = null;
		 RESULT = "video_proj"; 
              CUP$parser$result = new java_cup.runtime.Symbol(44/*autreAppareil*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // autreAppareil ::= CAFETIERE 
            {
              String RESULT = null;
		 RESULT = "cafetiere"; 
              CUP$parser$result = new java_cup.runtime.Symbol(44/*autreAppareil*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // autreAppareil ::= HIFI 
            {
              String RESULT = null;
		 RESULT = "hifi"; 
              CUP$parser$result = new java_cup.runtime.Symbol(44/*autreAppareil*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // autreAppareil ::= TV 
            {
              String RESULT = null;
		 RESULT = "tv"; 
              CUP$parser$result = new java_cup.runtime.Symbol(44/*autreAppareil*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // interface ::= TABLETTE 
            {
              String RESULT = null;
		 RESULT = "tablette"; 
              CUP$parser$result = new java_cup.runtime.Symbol(45/*interface*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // interface ::= TELECOMMANDE 
            {
              String RESULT = null;
		 RESULT = "telecommande"; 
              CUP$parser$result = new java_cup.runtime.Symbol(45/*interface*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // interface ::= TELEPHONE 
            {
              String RESULT = null;
		 RESULT = "telephone"; 
              CUP$parser$result = new java_cup.runtime.Symbol(45/*interface*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // interface ::= MOBILE 
            {
              String RESULT = null;
		 RESULT = "mobile"; 
              CUP$parser$result = new java_cup.runtime.Symbol(45/*interface*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // interface ::= INTERRUPTEUR 
            {
              String RESULT = null;
		 RESULT = "interrupteur"; 
              CUP$parser$result = new java_cup.runtime.Symbol(45/*interface*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // appareil ::= FENETRE 
            {
              String RESULT = null;
		 RESULT = "fenetre"; 
              CUP$parser$result = new java_cup.runtime.Symbol(43/*appareil*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // appareil ::= ALARME 
            {
              String RESULT = null;
		 RESULT = "alarme"; 
              CUP$parser$result = new java_cup.runtime.Symbol(43/*appareil*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // appareil ::= CHAUFFAGE 
            {
              String RESULT = null;
		 RESULT = "chauffage"; 
              CUP$parser$result = new java_cup.runtime.Symbol(43/*appareil*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // appareil ::= VOLET 
            {
              String RESULT = null;
		 RESULT = "volet"; 
              CUP$parser$result = new java_cup.runtime.Symbol(43/*appareil*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // appareil ::= ECLAIRAGE 
            {
              String RESULT = null;
		 RESULT = "eclairage"; 
              CUP$parser$result = new java_cup.runtime.Symbol(43/*appareil*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // element ::= IDENTIFIANT 
            {
              String RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = r; 
              CUP$parser$result = new java_cup.runtime.Symbol(47/*element*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // element ::= autreAppareil 
            {
              String RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = r; 
              CUP$parser$result = new java_cup.runtime.Symbol(47/*element*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // element ::= interface 
            {
              String RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = r; 
              CUP$parser$result = new java_cup.runtime.Symbol(47/*element*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // element ::= appareil 
            {
              String RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = r; 
              CUP$parser$result = new java_cup.runtime.Symbol(47/*element*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // identifiantDefintion ::= element 
            {
              String RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = r; 
              CUP$parser$result = new java_cup.runtime.Symbol(50/*identifiantDefintion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // identifiantDefintion ::= autreAppareilDefinition 
            {
              String RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = r; 
              CUP$parser$result = new java_cup.runtime.Symbol(50/*identifiantDefintion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // closeCommande ::= CHEVRON_GAUCHE SLASH DECLARATION_COMMANDES CHEVRON_DROIT 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(20/*closeCommande*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // openCommande ::= CHEVRON_GAUCHE DECLARATION_COMMANDES CHEVRON_DROIT 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(19/*openCommande*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // closeScenario ::= CHEVRON_GAUCHE SLASH SCENARIO IDENTIFIANT CHEVRON_DROIT 
            {
              String RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = id; 
              CUP$parser$result = new java_cup.runtime.Symbol(42/*closeScenario*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // openScenario ::= CHEVRON_GAUCHE SCENARIO IDENTIFIANT CHEVRON_DROIT 
            {
              String RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = id; 
              CUP$parser$result = new java_cup.runtime.Symbol(41/*openScenario*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // closeScenarii ::= CHEVRON_GAUCHE SLASH DECLARATION_SCENARII CHEVRON_DROIT 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(16/*closeScenarii*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // openScenarii ::= CHEVRON_GAUCHE DECLARATION_SCENARII CHEVRON_DROIT 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*openScenarii*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // closeInterfaces ::= CHEVRON_GAUCHE SLASH DECLARATION_INTERFACES CHEVRON_DROIT 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*closeInterfaces*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // openInterfaces ::= CHEVRON_GAUCHE DECLARATION_INTERFACES CHEVRON_DROIT 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*openInterfaces*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // closeAppareils ::= CHEVRON_GAUCHE SLASH DECLARATION_APPAREILS CHEVRON_DROIT 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*closeAppareils*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // openAppareils ::= CHEVRON_GAUCHE DECLARATION_APPAREILS CHEVRON_DROIT 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*openAppareils*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // closeDomus ::= CHEVRON_GAUCHE SLASH PROGRAMME_DOMUS CHEVRON_DROIT 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*closeDomus*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // openDomus ::= CHEVRON_GAUCHE PROGRAMME_DOMUS CHEVRON_DROIT 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*openDomus*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // subProgrammationContents ::= UNDERSCORE 
            {
              Integer RESULT = null;
		 RESULT = -1; 
              CUP$parser$result = new java_cup.runtime.Symbol(54/*subProgrammationContents*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // subProgrammationContents ::= ENTIER 
            {
              Integer RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(54/*subProgrammationContents*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // programmationContents ::= PAR_GAUCHE subProgrammationContents VIRGULE subProgrammationContents VIRGULE subProgrammationContents VIRGULE subProgrammationContents VIRGULE subProgrammationContents PAR_DROITE 
            {
              Date RESULT = null;
		int anneeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int anneeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Integer annee = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int moisleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int moisright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Integer mois = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int jourleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int jourright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Integer jour = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int heureleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int heureright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer heure = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int minuteleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int minuteright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer minute = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        Date date = new Date(-1, -1, -1, -1, -1);
        
        boolean error = false;
        
        if(!(annee >= 1000 && annee <= 9999) && annee != -1) {
            System.out.println("Erreur. Format de l'année incorrect.");
            RESULT = date;
            error = true;
        }
        
        if(!(mois >= 1 && mois <= 12) && mois != -1) {
            System.out.println("Erreur. Format du mois incorrect.");
            RESULT = date;
            error = true;
        }
        
        if(!(jour >= 1 && jour <= 31) && jour != -1) {
            System.out.println("Erreur. Format du jour incorrect.");
            RESULT = date;
            error = true;
        }
        
        if(!(heure >= 0 && heure <= 23) && heure != -1) {
            System.out.println("Erreur. Format de l'heure incorrect.");
            RESULT = date;
            error = true;
        }
        
        if(!(minute >= 0 && minute <= 59) && minute != -1) {
            System.out.println("Erreur. Format de la minute incorrect.");
            RESULT = date;
            error = true;
        }
        
        if(!error) {
            date = new Date(annee, mois, jour, heure, minute);
            RESULT = date;
        }
    
              CUP$parser$result = new java_cup.runtime.Symbol(52/*programmationContents*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // multiProgrammationContents ::= programmationContents 
            {
              ArrayList<Date> RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Date d = (Date)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
        ArrayList<Date> date = new ArrayList<Date>();
        date.add(d);
        RESULT = date;
    
              CUP$parser$result = new java_cup.runtime.Symbol(53/*multiProgrammationContents*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // multiProgrammationContents ::= multiProgrammationContents VIRGULE programmationContents 
            {
              ArrayList<Date> RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Date> l = (ArrayList<Date>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Date d = (Date)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
        ArrayList<Date> date = new ArrayList<Date>();
        date.addAll(l);
        date.add(d);
        RESULT = date;
    
              CUP$parser$result = new java_cup.runtime.Symbol(53/*multiProgrammationContents*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // commandeProgrammation ::= PROGRAMMER IDENTIFIANT AFFECTATION ACO_GAUCHE multiProgrammationContents ACO_DROITE POINT 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Date> l = (ArrayList<Date>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        this.addScenarioDate(id, l);
        Iterator<Date> itr = l.iterator();
        while(itr.hasNext())
            System.out.println("\t\tProgrammation du scénario \"" + id + "\" pour la date : " + itr.next());
    
              CUP$parser$result = new java_cup.runtime.Symbol(39/*commandeProgrammation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // commandeProgrammation ::= PROGRAMMER IDENTIFIANT AFFECTATION programmationContents POINT 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Date d = (Date)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        ArrayList<Date> l = new ArrayList<Date>();
        l.add(d);
        this.addScenarioDate(id, l);
        System.out.println("\t\tProgrammation du scénario \"" + id + "\" pour l'unique date : " + d);
    
              CUP$parser$result = new java_cup.runtime.Symbol(39/*commandeProgrammation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // commandeAssociation ::= ASSOCIER IDENTIFIANT AFFECTATION ACO_GAUCHE identMult ACO_DROITE POINT 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<String> l = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        this.addAssociationScenario(id, l);
        System.out.println("\t\tAssociation de l'interface \"" + id + "\" au scénario \"" + l + "\".");
    
              CUP$parser$result = new java_cup.runtime.Symbol(38/*commandeAssociation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // commandeAssociation ::= ASSOCIER IDENTIFIANT AFFECTATION IDENTIFIANT POINT 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        ArrayList<String> l = new ArrayList<String>();
        l.add(s);
        this.addAssociationScenario(id, l);
        System.out.println("\t\tAssociation de l'interface \"" + id + "\" au scénario \"" + s + "\".");
    
              CUP$parser$result = new java_cup.runtime.Symbol(38/*commandeAssociation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // instructionsCommande ::= commandeProgrammation 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(26/*instructionsCommande*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // instructionsCommande ::= commandeAssociation 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(26/*instructionsCommande*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // listInstructionsCommande ::= instructionsCommande 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(25/*listInstructionsCommande*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // listInstructionsCommande ::= listInstructionsCommande instructionsCommande 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(25/*listInstructionsCommande*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // declarationCommande ::= openCommande NT$9 listInstructionsCommande closeCommande 
            {
              Object RESULT = null;
              // propagate RESULT from NT$9
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 System.out.println("\tCommandes déclarées."); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*declarationCommande*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$9 ::= 
            {
              Object RESULT = null;
 System.out.println("\tDéclaration des commandes..."); 
              CUP$parser$result = new java_cup.runtime.Symbol(64/*NT$9*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // commandeMessage ::= MESSAGE PAR_GAUCHE CHAINE PAR_DROITE POINT_VIRGULE 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        System.out.println("\t\t\tMessage : " + c + ".");
    
              CUP$parser$result = new java_cup.runtime.Symbol(37/*commandeMessage*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // commandeExecuterScenario ::= EXECUTER_SCENARIO IDENTIFIANT POINT_VIRGULE 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        System.out.println("\t\t\tExecution du scénario \"" + id + "\".");
    
              CUP$parser$result = new java_cup.runtime.Symbol(36/*commandeExecuterScenario*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // condition ::= appelAction EGALITE etatAppareil 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
        System.out.print(" == \"" + e + "\"");
    
              CUP$parser$result = new java_cup.runtime.Symbol(32/*condition*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // testCondition ::= SI PAR_GAUCHE NT$7 condition PAR_DROITE ALORS NT$8 listInstructionsScenario FSI POINT_VIRGULE 
            {
              Object RESULT = null;
              // propagate RESULT from NT$7
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
              // propagate RESULT from NT$8
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(31/*testCondition*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$8 ::= 
            {
              Object RESULT = null;

        System.out.print("\n\t\t\talors\n\t");
    
              CUP$parser$result = new java_cup.runtime.Symbol(63/*NT$8*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$7 ::= 
            {
              Object RESULT = null;

        System.out.print("\t\t\tSi\n\t");
    
              CUP$parser$result = new java_cup.runtime.Symbol(62/*NT$7*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // parcours ::= POURTOUT IDENTIFIANT DEUX_POINT identifiantDefintion FAIRE NT$6 listInstructionsScenario FAIT POINT_VIRGULE 
            {
              Object RESULT = null;
              // propagate RESULT from NT$6
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idRefleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idRefright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String idRef = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(30/*parcours*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$6 ::= 
            {
              Object RESULT = null;
		int idRefleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idRefright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String idRef = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

        data.addTemporalyIdent(e, idRef);
        System.out.print("\t\t\tPourtout tout \"" + idRef + "\" de type \"" + e + "\" faire\n\t");
    
              CUP$parser$result = new java_cup.runtime.Symbol(61/*NT$6*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // appelAction ::= IDENTIFIANT POINT listAction 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
        String type = data.getType(id);
        if(type == null)
            System.out.println("Erreur. L'identifiant d'appareil \"" + id + "\" n'existe pas.");
        else {       
            if(!data.hasAction(type, a))
                System.out.println("Erreur. L'action \"" + a + "\" n'existe pas pour \"" + id + "\"."); 
                    
            System.out.print("\t\t\tMéthode \"" + a + "\" appelé sur \"" + id + "\"");
        }
    
              CUP$parser$result = new java_cup.runtime.Symbol(40/*appelAction*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // actionAppareil ::= appelAction POINT_VIRGULE 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(29/*actionAppareil*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // instructionsScenario ::= commandeMessage 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(28/*instructionsScenario*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // instructionsScenario ::= commandeExecuterScenario 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(28/*instructionsScenario*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // instructionsScenario ::= testCondition 
            {
              Object RESULT = null;
		
        System.out.println("");
    
              CUP$parser$result = new java_cup.runtime.Symbol(28/*instructionsScenario*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // instructionsScenario ::= parcours 
            {
              Object RESULT = null;
		
        System.out.println("");
    
              CUP$parser$result = new java_cup.runtime.Symbol(28/*instructionsScenario*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // instructionsScenario ::= actionAppareil 
            {
              Object RESULT = null;
		
        System.out.println(".");
    
              CUP$parser$result = new java_cup.runtime.Symbol(28/*instructionsScenario*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // listInstructionsScenario ::= instructionsScenario 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(27/*listInstructionsScenario*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // listInstructionsScenario ::= listInstructionsScenario instructionsScenario 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(27/*listInstructionsScenario*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // scenario ::= openScenario NT$5 listInstructionsScenario closeScenario 
            {
              Object RESULT = null;
              // propagate RESULT from NT$5
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idOpenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idOpenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String idOpen = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idCloseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idCloseright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String idClose = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
        if(idOpen.equals(idClose)) {
            this.addIdentScenario(idOpen);
            System.out.println("\t\tScenario \"" + idClose + "\" déclaré.\n");
        } else
            System.out.println("Erreur. Les identifiants dans les balises de scenario doivent être identiques.");
        
    
              CUP$parser$result = new java_cup.runtime.Symbol(18/*scenario*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$5 ::= 
            {
              Object RESULT = null;
		int idOpenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idOpenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String idOpen = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
 
        System.out.println("\t\tDéclaration du Scenario \"" + idOpen + "\"...");
    
              CUP$parser$result = new java_cup.runtime.Symbol(60/*NT$5*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // scenariiContent ::= scenario 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*scenariiContent*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // scenariiContent ::= scenariiContent scenario 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*scenariiContent*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // declarationScenarii ::= openScenarii NT$4 scenariiContent closeScenarii 
            {
              Object RESULT = null;
              // propagate RESULT from NT$4
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 System.out.println("\tScenarii déclaré.\n"); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*declarationScenarii*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$4 ::= 
            {
              Object RESULT = null;
 System.out.println("\tDéclaration du Scenarii...\n"); 
              CUP$parser$result = new java_cup.runtime.Symbol(59/*NT$4*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // identMult ::= identMult VIRGULE IDENTIFIANT 
            {
              ArrayList<String> RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<String> l = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
            ArrayList<String> list = new ArrayList<String>();
            list.addAll(l);
            list.add(id);
            RESULT = list;
        
              CUP$parser$result = new java_cup.runtime.Symbol(51/*identMult*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // identMult ::= IDENTIFIANT 
            {
              ArrayList<String> RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
        ArrayList<String> list = new ArrayList<String>();
        list.add(id);
        RESULT = list;
    
              CUP$parser$result = new java_cup.runtime.Symbol(51/*identMult*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // instructionsInterface ::= interface identMult POINT 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> l = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        this.addIdentInterface(a, l);
        System.out.println("\t\tDéclaration des interfaces " + l + " de type \"" + a + "\".");
    
              CUP$parser$result = new java_cup.runtime.Symbol(24/*instructionsInterface*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // listInstructionsInterface ::= instructionsInterface 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(23/*listInstructionsInterface*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // listInstructionsInterface ::= listInstructionsInterface instructionsInterface 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(23/*listInstructionsInterface*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declarationInterfaces ::= openInterfaces NT$3 listInstructionsInterface closeInterfaces 
            {
              Object RESULT = null;
              // propagate RESULT from NT$3
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 System.out.println("\tInterfaces déclarées.\n"); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*declarationInterfaces*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$3 ::= 
            {
              Object RESULT = null;
 System.out.println("\tDéclaration des interfaces..."); 
              CUP$parser$result = new java_cup.runtime.Symbol(58/*NT$3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // commandeDefinition ::= DEFINIR IDENTIFIANT AFFECTATION ACO_GAUCHE identMult ACO_DROITE POINT 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<String> l = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        //this.addIdentAppareil(id, l);
        System.out.println("\t\tDéclaration de l'ensemble des appareils \"" + id + "\" contenant " + l + ".");
    
              CUP$parser$result = new java_cup.runtime.Symbol(35/*commandeDefinition*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // autreAppareilDefinition ::= AUTRE_APPAREIL PAR_GAUCHE autreAppareil NT$2 PAR_DROITE 
            {
              String RESULT = null;
              // propagate RESULT from NT$2
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(49/*autreAppareilDefinition*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$2 ::= 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
 RESULT = a; 
              CUP$parser$result = new java_cup.runtime.Symbol(57/*NT$2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // commandeAutreAppareil ::= autreAppareilDefinition identMult POINT 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> l = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        this.addIdentAppareil("autre_appareil", l);
        System.out.println("\t\tDéclaration des appareils " + l + " de type \"" + a + "\".");
    
              CUP$parser$result = new java_cup.runtime.Symbol(34/*commandeAutreAppareil*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // commandeDeclarationAppareil ::= appareil identMult POINT 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> l = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        this.addIdentAppareil(a, l);
        System.out.println("\t\tDéclaration des appareils " + l + " de type \"" + a + "\".");
    
              CUP$parser$result = new java_cup.runtime.Symbol(33/*commandeDeclarationAppareil*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instructionsAppareil ::= commandeDefinition 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(22/*instructionsAppareil*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instructionsAppareil ::= commandeAutreAppareil 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(22/*instructionsAppareil*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instructionsAppareil ::= commandeDeclarationAppareil 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(22/*instructionsAppareil*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // listInstructionsAppareil ::= instructionsAppareil 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(21/*listInstructionsAppareil*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // listInstructionsAppareil ::= listInstructionsAppareil instructionsAppareil 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(21/*listInstructionsAppareil*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declarationAppareils ::= openAppareils NT$1 listInstructionsAppareil closeAppareils 
            {
              Object RESULT = null;
              // propagate RESULT from NT$1
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 System.out.println("\tAppareils déclarés.\n"); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*declarationAppareils*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$1 ::= 
            {
              Object RESULT = null;
 System.out.println("\tDéclaration des appareils..."); 
              CUP$parser$result = new java_cup.runtime.Symbol(56/*NT$1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declarationAppareilsInterfaces ::= declarationInterfaces declarationAppareils 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*declarationAppareilsInterfaces*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declarationAppareilsInterfaces ::= declarationAppareils declarationInterfaces 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*declarationAppareilsInterfaces*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // domusContent ::= declarationAppareilsInterfaces declarationScenarii declarationCommande 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*domusContent*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // domus ::= openDomus NT$0 domusContent closeDomus 
            {
              Object RESULT = null;
              // propagate RESULT from NT$0
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 System.out.println("Domus déclaré."); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*domus*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$0 ::= 
            {
              Object RESULT = null;
 System.out.println("Début du Domus..."); 
              CUP$parser$result = new java_cup.runtime.Symbol(55/*NT$0*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // prog ::= 
            {
              Object RESULT = null;
		
        System.out.println("Fichier vide.");
    
              CUP$parser$result = new java_cup.runtime.Symbol(1/*prog*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= prog EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // prog ::= domus 
            {
              Object RESULT = null;
		
        System.out.println("Analyse terminée.");
        this.generateFiles();
    
              CUP$parser$result = new java_cup.runtime.Symbol(1/*prog*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

